/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client;

import com.github.asamoal.nifi.swagger.ApiCallback;
import com.github.asamoal.nifi.swagger.ApiClient;
import com.github.asamoal.nifi.swagger.ApiException;
import com.github.asamoal.nifi.swagger.ApiResponse;
import com.github.asamoal.nifi.swagger.Configuration;
import com.github.asamoal.nifi.swagger.Pair;
import com.github.asamoal.nifi.swagger.ProgressRequestBody;
import com.github.asamoal.nifi.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.asamoal.nifi.swagger.client.model.AboutEntity;
import com.github.asamoal.nifi.swagger.client.model.ActionEntity;
import com.github.asamoal.nifi.swagger.client.model.ActivateControllerServicesEntity;
import com.github.asamoal.nifi.swagger.client.model.BannerEntity;
import com.github.asamoal.nifi.swagger.client.model.BulletinBoardEntity;
import com.github.asamoal.nifi.swagger.client.model.ClusteSummaryEntity;
import com.github.asamoal.nifi.swagger.client.model.ClusterSearchResultsEntity;
import com.github.asamoal.nifi.swagger.client.model.ComponentHistoryEntity;
import com.github.asamoal.nifi.swagger.client.model.ConnectionStatisticsEntity;
import com.github.asamoal.nifi.swagger.client.model.ConnectionStatusEntity;
import com.github.asamoal.nifi.swagger.client.model.ControllerBulletinsEntity;
import com.github.asamoal.nifi.swagger.client.model.ControllerServiceTypesEntity;
import com.github.asamoal.nifi.swagger.client.model.ControllerServicesEntity;
import com.github.asamoal.nifi.swagger.client.model.ControllerStatusEntity;
import com.github.asamoal.nifi.swagger.client.model.CurrentUserEntity;
import com.github.asamoal.nifi.swagger.client.model.FlowConfigurationEntity;
import com.github.asamoal.nifi.swagger.client.model.FlowRegistryBucketsEntity;
import com.github.asamoal.nifi.swagger.client.model.FlowRegistryClientsEntity;
import com.github.asamoal.nifi.swagger.client.model.HistoryEntity;
import com.github.asamoal.nifi.swagger.client.model.ParameterContextsEntity;
import com.github.asamoal.nifi.swagger.client.model.ParameterProviderTypesEntity;
import com.github.asamoal.nifi.swagger.client.model.ParameterProvidersEntity;
import com.github.asamoal.nifi.swagger.client.model.PortStatusEntity;
import com.github.asamoal.nifi.swagger.client.model.PrioritizerTypesEntity;
import com.github.asamoal.nifi.swagger.client.model.ProcessGroupFlowEntity;
import com.github.asamoal.nifi.swagger.client.model.ProcessGroupStatusEntity;
import com.github.asamoal.nifi.swagger.client.model.ProcessorStatusEntity;
import com.github.asamoal.nifi.swagger.client.model.ProcessorTypesEntity;
import com.github.asamoal.nifi.swagger.client.model.RemoteProcessGroupStatusEntity;
import com.github.asamoal.nifi.swagger.client.model.ReportingTaskTypesEntity;
import com.github.asamoal.nifi.swagger.client.model.ReportingTasksEntity;
import com.github.asamoal.nifi.swagger.client.model.RuntimeManifestEntity;
import com.github.asamoal.nifi.swagger.client.model.ScheduleComponentsEntity;
import com.github.asamoal.nifi.swagger.client.model.SearchResultsEntity;
import com.github.asamoal.nifi.swagger.client.model.StatusHistoryEntity;
import com.github.asamoal.nifi.swagger.client.model.StreamingOutput;
import com.github.asamoal.nifi.swagger.client.model.TemplatesEntity;
import com.github.asamoal.nifi.swagger.client.model.VersionedFlowEntity;
import com.github.asamoal.nifi.swagger.client.model.VersionedFlowSnapshotMetadataSetEntity;
import com.github.asamoal.nifi.swagger.client.model.VersionedFlowsEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlowApi {
    private ApiClient apiClient;

    public FlowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlowApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for activateControllerServices
     * @param body The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered. (required)
     * @param id The process group id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call activateControllerServicesCall(ActivateControllerServicesEntity body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/flow/process-groups/{id}/controller-services"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call activateControllerServicesValidateBeforeCall(ActivateControllerServicesEntity body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling activateControllerServices(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling activateControllerServices(Async)");
        }
        
        com.squareup.okhttp.Call call = activateControllerServicesCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable or disable Controller Services in the specified Process Group.
     * 
     * @param body The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered. (required)
     * @param id The process group id. (required)
     * @return ActivateControllerServicesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActivateControllerServicesEntity activateControllerServices(ActivateControllerServicesEntity body, String id) throws ApiException {
        ApiResponse<ActivateControllerServicesEntity> resp = activateControllerServicesWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Enable or disable Controller Services in the specified Process Group.
     * 
     * @param body The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered. (required)
     * @param id The process group id. (required)
     * @return ApiResponse&lt;ActivateControllerServicesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActivateControllerServicesEntity> activateControllerServicesWithHttpInfo(ActivateControllerServicesEntity body, String id) throws ApiException {
        com.squareup.okhttp.Call call = activateControllerServicesValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<ActivateControllerServicesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable or disable Controller Services in the specified Process Group. (asynchronously)
     * 
     * @param body The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered. (required)
     * @param id The process group id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call activateControllerServicesAsync(ActivateControllerServicesEntity body, String id, final ApiCallback<ActivateControllerServicesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = activateControllerServicesValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActivateControllerServicesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for generateClientId
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generateClientIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/client-id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generateClientIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = generateClientIdCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Generates a client id.
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String generateClientId() throws ApiException {
        ApiResponse<String> resp = generateClientIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * Generates a client id.
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> generateClientIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = generateClientIdValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generates a client id. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateClientIdAsync(final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateClientIdValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAboutInfo
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAboutInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/about";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAboutInfoValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAboutInfoCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves details about this NiFi to put in the About dialog
     * 
     * @return AboutEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AboutEntity getAboutInfo() throws ApiException {
        ApiResponse<AboutEntity> resp = getAboutInfoWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves details about this NiFi to put in the About dialog
     * 
     * @return ApiResponse&lt;AboutEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AboutEntity> getAboutInfoWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAboutInfoValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AboutEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves details about this NiFi to put in the About dialog (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAboutInfoAsync(final ApiCallback<AboutEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAboutInfoValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AboutEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAction
     * @param id The action id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActionCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/history/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActionValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAction(Async)");
        }
        
        com.squareup.okhttp.Call call = getActionCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets an action
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param id The action id. (required)
     * @return ActionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActionEntity getAction(String id) throws ApiException {
        ApiResponse<ActionEntity> resp = getActionWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets an action
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param id The action id. (required)
     * @return ApiResponse&lt;ActionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActionEntity> getActionWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getActionValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ActionEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets an action (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param id The action id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActionAsync(String id, final ApiCallback<ActionEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActionValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActionEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBanners
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBannersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/banners";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBannersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getBannersCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves the banners for this NiFi
     * 
     * @return BannerEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BannerEntity getBanners() throws ApiException {
        ApiResponse<BannerEntity> resp = getBannersWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the banners for this NiFi
     * 
     * @return ApiResponse&lt;BannerEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BannerEntity> getBannersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getBannersValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<BannerEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the banners for this NiFi (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBannersAsync(final ApiCallback<BannerEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBannersValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BannerEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBuckets
     * @param id The registry id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBucketsCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/registries/{id}/buckets"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBucketsValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBuckets(Async)");
        }
        
        com.squareup.okhttp.Call call = getBucketsCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the buckets from the specified registry for the current user
     * 
     * @param id The registry id. (required)
     * @return FlowRegistryBucketsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowRegistryBucketsEntity getBuckets(String id) throws ApiException {
        ApiResponse<FlowRegistryBucketsEntity> resp = getBucketsWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets the buckets from the specified registry for the current user
     * 
     * @param id The registry id. (required)
     * @return ApiResponse&lt;FlowRegistryBucketsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowRegistryBucketsEntity> getBucketsWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getBucketsValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<FlowRegistryBucketsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the buckets from the specified registry for the current user (asynchronously)
     * 
     * @param id The registry id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBucketsAsync(String id, final ApiCallback<FlowRegistryBucketsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBucketsValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowRegistryBucketsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBulletinBoard
     * @param after Includes bulletins with an id after this value. (optional)
     * @param sourceName Includes bulletins originating from this sources whose name match this regular expression. (optional)
     * @param message Includes bulletins whose message that match this regular expression. (optional)
     * @param sourceId Includes bulletins originating from this sources whose id match this regular expression. (optional)
     * @param groupId Includes bulletins originating from this sources whose group id match this regular expression. (optional)
     * @param limit The number of bulletins to limit the response to. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBulletinBoardCall(String after, String sourceName, String message, String sourceId, String groupId, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/bulletin-board";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (after != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
        if (sourceName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceName", sourceName));
        if (message != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("message", message));
        if (sourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceId", sourceId));
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupId", groupId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBulletinBoardValidateBeforeCall(String after, String sourceName, String message, String sourceId, String groupId, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getBulletinBoardCall(after, sourceName, message, sourceId, groupId, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets current bulletins
     * 
     * @param after Includes bulletins with an id after this value. (optional)
     * @param sourceName Includes bulletins originating from this sources whose name match this regular expression. (optional)
     * @param message Includes bulletins whose message that match this regular expression. (optional)
     * @param sourceId Includes bulletins originating from this sources whose id match this regular expression. (optional)
     * @param groupId Includes bulletins originating from this sources whose group id match this regular expression. (optional)
     * @param limit The number of bulletins to limit the response to. (optional)
     * @return BulletinBoardEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BulletinBoardEntity getBulletinBoard(String after, String sourceName, String message, String sourceId, String groupId, String limit) throws ApiException {
        ApiResponse<BulletinBoardEntity> resp = getBulletinBoardWithHttpInfo(after, sourceName, message, sourceId, groupId, limit);
        return resp.getData();
    }

    /**
     * Gets current bulletins
     * 
     * @param after Includes bulletins with an id after this value. (optional)
     * @param sourceName Includes bulletins originating from this sources whose name match this regular expression. (optional)
     * @param message Includes bulletins whose message that match this regular expression. (optional)
     * @param sourceId Includes bulletins originating from this sources whose id match this regular expression. (optional)
     * @param groupId Includes bulletins originating from this sources whose group id match this regular expression. (optional)
     * @param limit The number of bulletins to limit the response to. (optional)
     * @return ApiResponse&lt;BulletinBoardEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BulletinBoardEntity> getBulletinBoardWithHttpInfo(String after, String sourceName, String message, String sourceId, String groupId, String limit) throws ApiException {
        com.squareup.okhttp.Call call = getBulletinBoardValidateBeforeCall(after, sourceName, message, sourceId, groupId, limit, null, null);
        Type localVarReturnType = new TypeToken<BulletinBoardEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets current bulletins (asynchronously)
     * 
     * @param after Includes bulletins with an id after this value. (optional)
     * @param sourceName Includes bulletins originating from this sources whose name match this regular expression. (optional)
     * @param message Includes bulletins whose message that match this regular expression. (optional)
     * @param sourceId Includes bulletins originating from this sources whose id match this regular expression. (optional)
     * @param groupId Includes bulletins originating from this sources whose group id match this regular expression. (optional)
     * @param limit The number of bulletins to limit the response to. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBulletinBoardAsync(String after, String sourceName, String message, String sourceId, String groupId, String limit, final ApiCallback<BulletinBoardEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBulletinBoardValidateBeforeCall(after, sourceName, message, sourceId, groupId, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BulletinBoardEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBulletins
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBulletinsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/controller/bulletins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBulletinsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getBulletinsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves Controller level bulletins
     * 
     * @return ControllerBulletinsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ControllerBulletinsEntity getBulletins() throws ApiException {
        ApiResponse<ControllerBulletinsEntity> resp = getBulletinsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves Controller level bulletins
     * 
     * @return ApiResponse&lt;ControllerBulletinsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ControllerBulletinsEntity> getBulletinsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getBulletinsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ControllerBulletinsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves Controller level bulletins (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBulletinsAsync(final ApiCallback<ControllerBulletinsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBulletinsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ControllerBulletinsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClusterSummary
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClusterSummaryCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/cluster/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClusterSummaryValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getClusterSummaryCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * The cluster summary for this NiFi
     * 
     * @return ClusteSummaryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusteSummaryEntity getClusterSummary() throws ApiException {
        ApiResponse<ClusteSummaryEntity> resp = getClusterSummaryWithHttpInfo();
        return resp.getData();
    }

    /**
     * The cluster summary for this NiFi
     * 
     * @return ApiResponse&lt;ClusteSummaryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusteSummaryEntity> getClusterSummaryWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getClusterSummaryValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ClusteSummaryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * The cluster summary for this NiFi (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClusterSummaryAsync(final ApiCallback<ClusteSummaryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClusterSummaryValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusteSummaryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComponentHistory
     * @param componentId The component id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getComponentHistoryCall(String componentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/history/components/{componentId}"
            .replaceAll("\\{" + "componentId" + "\\}", apiClient.escapeString(componentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getComponentHistoryValidateBeforeCall(String componentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'componentId' is set
        if (componentId == null) {
            throw new ApiException("Missing the required parameter 'componentId' when calling getComponentHistory(Async)");
        }
        
        com.squareup.okhttp.Call call = getComponentHistoryCall(componentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets configuration history for a component
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param componentId The component id. (required)
     * @return ComponentHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ComponentHistoryEntity getComponentHistory(String componentId) throws ApiException {
        ApiResponse<ComponentHistoryEntity> resp = getComponentHistoryWithHttpInfo(componentId);
        return resp.getData();
    }

    /**
     * Gets configuration history for a component
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param componentId The component id. (required)
     * @return ApiResponse&lt;ComponentHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ComponentHistoryEntity> getComponentHistoryWithHttpInfo(String componentId) throws ApiException {
        com.squareup.okhttp.Call call = getComponentHistoryValidateBeforeCall(componentId, null, null);
        Type localVarReturnType = new TypeToken<ComponentHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets configuration history for a component (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param componentId The component id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getComponentHistoryAsync(String componentId, final ApiCallback<ComponentHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getComponentHistoryValidateBeforeCall(componentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ComponentHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConnectionStatistics
     * @param id The connection id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the statistics. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConnectionStatisticsCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/connections/{id}/statistics"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nodewise != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodewise", nodewise));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConnectionStatisticsValidateBeforeCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConnectionStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = getConnectionStatisticsCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets statistics for a connection
     * 
     * @param id The connection id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the statistics. (optional)
     * @return ConnectionStatisticsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionStatisticsEntity getConnectionStatistics(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        ApiResponse<ConnectionStatisticsEntity> resp = getConnectionStatisticsWithHttpInfo(id, nodewise, clusterNodeId);
        return resp.getData();
    }

    /**
     * Gets statistics for a connection
     * 
     * @param id The connection id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the statistics. (optional)
     * @return ApiResponse&lt;ConnectionStatisticsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionStatisticsEntity> getConnectionStatisticsWithHttpInfo(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getConnectionStatisticsValidateBeforeCall(id, nodewise, clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<ConnectionStatisticsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets statistics for a connection (asynchronously)
     * 
     * @param id The connection id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the statistics. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConnectionStatisticsAsync(String id, Boolean nodewise, String clusterNodeId, final ApiCallback<ConnectionStatisticsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConnectionStatisticsValidateBeforeCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionStatisticsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConnectionStatus
     * @param id The connection id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConnectionStatusCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/connections/{id}/status"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nodewise != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodewise", nodewise));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConnectionStatusValidateBeforeCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConnectionStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getConnectionStatusCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets status for a connection
     * 
     * @param id The connection id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ConnectionStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConnectionStatusEntity getConnectionStatus(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        ApiResponse<ConnectionStatusEntity> resp = getConnectionStatusWithHttpInfo(id, nodewise, clusterNodeId);
        return resp.getData();
    }

    /**
     * Gets status for a connection
     * 
     * @param id The connection id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ApiResponse&lt;ConnectionStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConnectionStatusEntity> getConnectionStatusWithHttpInfo(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getConnectionStatusValidateBeforeCall(id, nodewise, clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<ConnectionStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status for a connection (asynchronously)
     * 
     * @param id The connection id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConnectionStatusAsync(String id, Boolean nodewise, String clusterNodeId, final ApiCallback<ConnectionStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConnectionStatusValidateBeforeCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConnectionStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConnectionStatusHistory
     * @param id The connection id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConnectionStatusHistoryCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/connections/{id}/status/history"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConnectionStatusHistoryValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConnectionStatusHistory(Async)");
        }
        
        com.squareup.okhttp.Call call = getConnectionStatusHistoryCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the status history for a connection
     * 
     * @param id The connection id. (required)
     * @return StatusHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusHistoryEntity getConnectionStatusHistory(String id) throws ApiException {
        ApiResponse<StatusHistoryEntity> resp = getConnectionStatusHistoryWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets the status history for a connection
     * 
     * @param id The connection id. (required)
     * @return ApiResponse&lt;StatusHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusHistoryEntity> getConnectionStatusHistoryWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getConnectionStatusHistoryValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the status history for a connection (asynchronously)
     * 
     * @param id The connection id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConnectionStatusHistoryAsync(String id, final ApiCallback<StatusHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConnectionStatusHistoryValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getControllerServiceTypes
     * @param serviceType If specified, will only return controller services that are compatible with this type of service. (optional)
     * @param serviceBundleGroup If serviceType specified, is the bundle group of the serviceType. (optional)
     * @param serviceBundleArtifact If serviceType specified, is the bundle artifact of the serviceType. (optional)
     * @param serviceBundleVersion If serviceType specified, is the bundle version of the serviceType. (optional)
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param typeFilter If specified, will only return types whose fully qualified classname matches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getControllerServiceTypesCall(String serviceType, String serviceBundleGroup, String serviceBundleArtifact, String serviceBundleVersion, String bundleGroupFilter, String bundleArtifactFilter, String typeFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/controller-service-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceType", serviceType));
        if (serviceBundleGroup != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceBundleGroup", serviceBundleGroup));
        if (serviceBundleArtifact != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceBundleArtifact", serviceBundleArtifact));
        if (serviceBundleVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceBundleVersion", serviceBundleVersion));
        if (bundleGroupFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bundleGroupFilter", bundleGroupFilter));
        if (bundleArtifactFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bundleArtifactFilter", bundleArtifactFilter));
        if (typeFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("typeFilter", typeFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getControllerServiceTypesValidateBeforeCall(String serviceType, String serviceBundleGroup, String serviceBundleArtifact, String serviceBundleVersion, String bundleGroupFilter, String bundleArtifactFilter, String typeFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getControllerServiceTypesCall(serviceType, serviceBundleGroup, serviceBundleArtifact, serviceBundleVersion, bundleGroupFilter, bundleArtifactFilter, typeFilter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves the types of controller services that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param serviceType If specified, will only return controller services that are compatible with this type of service. (optional)
     * @param serviceBundleGroup If serviceType specified, is the bundle group of the serviceType. (optional)
     * @param serviceBundleArtifact If serviceType specified, is the bundle artifact of the serviceType. (optional)
     * @param serviceBundleVersion If serviceType specified, is the bundle version of the serviceType. (optional)
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param typeFilter If specified, will only return types whose fully qualified classname matches. (optional)
     * @return ControllerServiceTypesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ControllerServiceTypesEntity getControllerServiceTypes(String serviceType, String serviceBundleGroup, String serviceBundleArtifact, String serviceBundleVersion, String bundleGroupFilter, String bundleArtifactFilter, String typeFilter) throws ApiException {
        ApiResponse<ControllerServiceTypesEntity> resp = getControllerServiceTypesWithHttpInfo(serviceType, serviceBundleGroup, serviceBundleArtifact, serviceBundleVersion, bundleGroupFilter, bundleArtifactFilter, typeFilter);
        return resp.getData();
    }

    /**
     * Retrieves the types of controller services that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param serviceType If specified, will only return controller services that are compatible with this type of service. (optional)
     * @param serviceBundleGroup If serviceType specified, is the bundle group of the serviceType. (optional)
     * @param serviceBundleArtifact If serviceType specified, is the bundle artifact of the serviceType. (optional)
     * @param serviceBundleVersion If serviceType specified, is the bundle version of the serviceType. (optional)
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param typeFilter If specified, will only return types whose fully qualified classname matches. (optional)
     * @return ApiResponse&lt;ControllerServiceTypesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ControllerServiceTypesEntity> getControllerServiceTypesWithHttpInfo(String serviceType, String serviceBundleGroup, String serviceBundleArtifact, String serviceBundleVersion, String bundleGroupFilter, String bundleArtifactFilter, String typeFilter) throws ApiException {
        com.squareup.okhttp.Call call = getControllerServiceTypesValidateBeforeCall(serviceType, serviceBundleGroup, serviceBundleArtifact, serviceBundleVersion, bundleGroupFilter, bundleArtifactFilter, typeFilter, null, null);
        Type localVarReturnType = new TypeToken<ControllerServiceTypesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the types of controller services that this NiFi supports (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param serviceType If specified, will only return controller services that are compatible with this type of service. (optional)
     * @param serviceBundleGroup If serviceType specified, is the bundle group of the serviceType. (optional)
     * @param serviceBundleArtifact If serviceType specified, is the bundle artifact of the serviceType. (optional)
     * @param serviceBundleVersion If serviceType specified, is the bundle version of the serviceType. (optional)
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param typeFilter If specified, will only return types whose fully qualified classname matches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getControllerServiceTypesAsync(String serviceType, String serviceBundleGroup, String serviceBundleArtifact, String serviceBundleVersion, String bundleGroupFilter, String bundleArtifactFilter, String typeFilter, final ApiCallback<ControllerServiceTypesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getControllerServiceTypesValidateBeforeCall(serviceType, serviceBundleGroup, serviceBundleArtifact, serviceBundleVersion, bundleGroupFilter, bundleArtifactFilter, typeFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ControllerServiceTypesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getControllerServicesFromController
     * @param uiOnly  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getControllerServicesFromControllerCall(Boolean uiOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/controller/controller-services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (uiOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uiOnly", uiOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getControllerServicesFromControllerValidateBeforeCall(Boolean uiOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getControllerServicesFromControllerCall(uiOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets controller services for reporting tasks
     * If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.
     * @param uiOnly  (optional, default to false)
     * @return ControllerServicesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ControllerServicesEntity getControllerServicesFromController(Boolean uiOnly) throws ApiException {
        ApiResponse<ControllerServicesEntity> resp = getControllerServicesFromControllerWithHttpInfo(uiOnly);
        return resp.getData();
    }

    /**
     * Gets controller services for reporting tasks
     * If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.
     * @param uiOnly  (optional, default to false)
     * @return ApiResponse&lt;ControllerServicesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ControllerServicesEntity> getControllerServicesFromControllerWithHttpInfo(Boolean uiOnly) throws ApiException {
        com.squareup.okhttp.Call call = getControllerServicesFromControllerValidateBeforeCall(uiOnly, null, null);
        Type localVarReturnType = new TypeToken<ControllerServicesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets controller services for reporting tasks (asynchronously)
     * If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.
     * @param uiOnly  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getControllerServicesFromControllerAsync(Boolean uiOnly, final ApiCallback<ControllerServicesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getControllerServicesFromControllerValidateBeforeCall(uiOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ControllerServicesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getControllerServicesFromGroup
     * @param id The process group id. (required)
     * @param includeAncestorGroups Whether or not to include parent/ancestory process groups (optional, default to true)
     * @param includeDescendantGroups Whether or not to include descendant process groups (optional, default to false)
     * @param uiOnly  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getControllerServicesFromGroupCall(String id, Boolean includeAncestorGroups, Boolean includeDescendantGroups, Boolean uiOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/process-groups/{id}/controller-services"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeAncestorGroups != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeAncestorGroups", includeAncestorGroups));
        if (includeDescendantGroups != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeDescendantGroups", includeDescendantGroups));
        if (uiOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uiOnly", uiOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getControllerServicesFromGroupValidateBeforeCall(String id, Boolean includeAncestorGroups, Boolean includeDescendantGroups, Boolean uiOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getControllerServicesFromGroup(Async)");
        }
        
        com.squareup.okhttp.Call call = getControllerServicesFromGroupCall(id, includeAncestorGroups, includeDescendantGroups, uiOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all controller services
     * If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.
     * @param id The process group id. (required)
     * @param includeAncestorGroups Whether or not to include parent/ancestory process groups (optional, default to true)
     * @param includeDescendantGroups Whether or not to include descendant process groups (optional, default to false)
     * @param uiOnly  (optional, default to false)
     * @return ControllerServicesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ControllerServicesEntity getControllerServicesFromGroup(String id, Boolean includeAncestorGroups, Boolean includeDescendantGroups, Boolean uiOnly) throws ApiException {
        ApiResponse<ControllerServicesEntity> resp = getControllerServicesFromGroupWithHttpInfo(id, includeAncestorGroups, includeDescendantGroups, uiOnly);
        return resp.getData();
    }

    /**
     * Gets all controller services
     * If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.
     * @param id The process group id. (required)
     * @param includeAncestorGroups Whether or not to include parent/ancestory process groups (optional, default to true)
     * @param includeDescendantGroups Whether or not to include descendant process groups (optional, default to false)
     * @param uiOnly  (optional, default to false)
     * @return ApiResponse&lt;ControllerServicesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ControllerServicesEntity> getControllerServicesFromGroupWithHttpInfo(String id, Boolean includeAncestorGroups, Boolean includeDescendantGroups, Boolean uiOnly) throws ApiException {
        com.squareup.okhttp.Call call = getControllerServicesFromGroupValidateBeforeCall(id, includeAncestorGroups, includeDescendantGroups, uiOnly, null, null);
        Type localVarReturnType = new TypeToken<ControllerServicesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all controller services (asynchronously)
     * If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.
     * @param id The process group id. (required)
     * @param includeAncestorGroups Whether or not to include parent/ancestory process groups (optional, default to true)
     * @param includeDescendantGroups Whether or not to include descendant process groups (optional, default to false)
     * @param uiOnly  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getControllerServicesFromGroupAsync(String id, Boolean includeAncestorGroups, Boolean includeDescendantGroups, Boolean uiOnly, final ApiCallback<ControllerServicesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getControllerServicesFromGroupValidateBeforeCall(id, includeAncestorGroups, includeDescendantGroups, uiOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ControllerServicesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getControllerStatus
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getControllerStatusCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getControllerStatusValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getControllerStatusCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the current status of this NiFi
     * 
     * @return ControllerStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ControllerStatusEntity getControllerStatus() throws ApiException {
        ApiResponse<ControllerStatusEntity> resp = getControllerStatusWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets the current status of this NiFi
     * 
     * @return ApiResponse&lt;ControllerStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ControllerStatusEntity> getControllerStatusWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getControllerStatusValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ControllerStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the current status of this NiFi (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getControllerStatusAsync(final ApiCallback<ControllerStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getControllerStatusValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ControllerStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCurrentUser
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCurrentUserCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/current-user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCurrentUserValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getCurrentUserCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves the user identity of the user making the request
     * 
     * @return CurrentUserEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CurrentUserEntity getCurrentUser() throws ApiException {
        ApiResponse<CurrentUserEntity> resp = getCurrentUserWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the user identity of the user making the request
     * 
     * @return ApiResponse&lt;CurrentUserEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CurrentUserEntity> getCurrentUserWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCurrentUserValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CurrentUserEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the user identity of the user making the request (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrentUserAsync(final ApiCallback<CurrentUserEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrentUserValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CurrentUserEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDetails
     * @param registryId The registry client id. (required)
     * @param bucketId The bucket id. (required)
     * @param flowId The flow id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDetailsCall(String registryId, String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/registries/{registry-id}/buckets/{bucket-id}/flows/{flow-id}/details"
            .replaceAll("\\{" + "registry-id" + "\\}", apiClient.escapeString(registryId.toString()))
            .replaceAll("\\{" + "bucket-id" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "flow-id" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDetailsValidateBeforeCall(String registryId, String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling getDetails(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getDetails(Async)");
        }
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling getDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = getDetailsCall(registryId, bucketId, flowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the details of a flow from the specified registry and bucket for the specified flow for the current user
     * 
     * @param registryId The registry client id. (required)
     * @param bucketId The bucket id. (required)
     * @param flowId The flow id. (required)
     * @return VersionedFlowEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlowEntity getDetails(String registryId, String bucketId, String flowId) throws ApiException {
        ApiResponse<VersionedFlowEntity> resp = getDetailsWithHttpInfo(registryId, bucketId, flowId);
        return resp.getData();
    }

    /**
     * Gets the details of a flow from the specified registry and bucket for the specified flow for the current user
     * 
     * @param registryId The registry client id. (required)
     * @param bucketId The bucket id. (required)
     * @param flowId The flow id. (required)
     * @return ApiResponse&lt;VersionedFlowEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlowEntity> getDetailsWithHttpInfo(String registryId, String bucketId, String flowId) throws ApiException {
        com.squareup.okhttp.Call call = getDetailsValidateBeforeCall(registryId, bucketId, flowId, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlowEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the details of a flow from the specified registry and bucket for the specified flow for the current user (asynchronously)
     * 
     * @param registryId The registry client id. (required)
     * @param bucketId The bucket id. (required)
     * @param flowId The flow id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDetailsAsync(String registryId, String bucketId, String flowId, final ApiCallback<VersionedFlowEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDetailsValidateBeforeCall(registryId, bucketId, flowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlowEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFlow
     * @param id The process group id. (required)
     * @param uiOnly  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFlowCall(String id, Boolean uiOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/process-groups/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (uiOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uiOnly", uiOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFlowValidateBeforeCall(String id, Boolean uiOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFlow(Async)");
        }
        
        com.squareup.okhttp.Call call = getFlowCall(id, uiOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a process group
     * If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.
     * @param id The process group id. (required)
     * @param uiOnly  (optional, default to false)
     * @return ProcessGroupFlowEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessGroupFlowEntity getFlow(String id, Boolean uiOnly) throws ApiException {
        ApiResponse<ProcessGroupFlowEntity> resp = getFlowWithHttpInfo(id, uiOnly);
        return resp.getData();
    }

    /**
     * Gets a process group
     * If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.
     * @param id The process group id. (required)
     * @param uiOnly  (optional, default to false)
     * @return ApiResponse&lt;ProcessGroupFlowEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessGroupFlowEntity> getFlowWithHttpInfo(String id, Boolean uiOnly) throws ApiException {
        com.squareup.okhttp.Call call = getFlowValidateBeforeCall(id, uiOnly, null, null);
        Type localVarReturnType = new TypeToken<ProcessGroupFlowEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a process group (asynchronously)
     * If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.
     * @param id The process group id. (required)
     * @param uiOnly  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFlowAsync(String id, Boolean uiOnly, final ApiCallback<ProcessGroupFlowEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFlowValidateBeforeCall(id, uiOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessGroupFlowEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFlowConfig
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFlowConfigCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFlowConfigValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getFlowConfigCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves the configuration for this NiFi flow
     * 
     * @return FlowConfigurationEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowConfigurationEntity getFlowConfig() throws ApiException {
        ApiResponse<FlowConfigurationEntity> resp = getFlowConfigWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the configuration for this NiFi flow
     * 
     * @return ApiResponse&lt;FlowConfigurationEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowConfigurationEntity> getFlowConfigWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getFlowConfigValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<FlowConfigurationEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the configuration for this NiFi flow (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFlowConfigAsync(final ApiCallback<FlowConfigurationEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFlowConfigValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowConfigurationEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFlowMetrics
     * @param producer The producer for flow file metrics. Each producer may have its own output format. (required)
     * @param includedRegistries Set of included metrics registries (optional)
     * @param sampleName Regular Expression Pattern to be applied against the sample name field (optional)
     * @param sampleLabelValue Regular Expression Pattern to be applied against the sample label value field (optional)
     * @param rootFieldName Name of the first field of JSON object. Applicable for JSON producer only. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFlowMetricsCall(String producer, List<String> includedRegistries, String sampleName, String sampleLabelValue, String rootFieldName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/metrics/{producer}"
            .replaceAll("\\{" + "producer" + "\\}", apiClient.escapeString(producer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includedRegistries != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "includedRegistries", includedRegistries));
        if (sampleName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sampleName", sampleName));
        if (sampleLabelValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sampleLabelValue", sampleLabelValue));
        if (rootFieldName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rootFieldName", rootFieldName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFlowMetricsValidateBeforeCall(String producer, List<String> includedRegistries, String sampleName, String sampleLabelValue, String rootFieldName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'producer' is set
        if (producer == null) {
            throw new ApiException("Missing the required parameter 'producer' when calling getFlowMetrics(Async)");
        }
        
        com.squareup.okhttp.Call call = getFlowMetricsCall(producer, includedRegistries, sampleName, sampleLabelValue, rootFieldName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all metrics for the flow from a particular node
     * 
     * @param producer The producer for flow file metrics. Each producer may have its own output format. (required)
     * @param includedRegistries Set of included metrics registries (optional)
     * @param sampleName Regular Expression Pattern to be applied against the sample name field (optional)
     * @param sampleLabelValue Regular Expression Pattern to be applied against the sample label value field (optional)
     * @param rootFieldName Name of the first field of JSON object. Applicable for JSON producer only. (optional)
     * @return StreamingOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamingOutput getFlowMetrics(String producer, List<String> includedRegistries, String sampleName, String sampleLabelValue, String rootFieldName) throws ApiException {
        ApiResponse<StreamingOutput> resp = getFlowMetricsWithHttpInfo(producer, includedRegistries, sampleName, sampleLabelValue, rootFieldName);
        return resp.getData();
    }

    /**
     * Gets all metrics for the flow from a particular node
     * 
     * @param producer The producer for flow file metrics. Each producer may have its own output format. (required)
     * @param includedRegistries Set of included metrics registries (optional)
     * @param sampleName Regular Expression Pattern to be applied against the sample name field (optional)
     * @param sampleLabelValue Regular Expression Pattern to be applied against the sample label value field (optional)
     * @param rootFieldName Name of the first field of JSON object. Applicable for JSON producer only. (optional)
     * @return ApiResponse&lt;StreamingOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamingOutput> getFlowMetricsWithHttpInfo(String producer, List<String> includedRegistries, String sampleName, String sampleLabelValue, String rootFieldName) throws ApiException {
        com.squareup.okhttp.Call call = getFlowMetricsValidateBeforeCall(producer, includedRegistries, sampleName, sampleLabelValue, rootFieldName, null, null);
        Type localVarReturnType = new TypeToken<StreamingOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all metrics for the flow from a particular node (asynchronously)
     * 
     * @param producer The producer for flow file metrics. Each producer may have its own output format. (required)
     * @param includedRegistries Set of included metrics registries (optional)
     * @param sampleName Regular Expression Pattern to be applied against the sample name field (optional)
     * @param sampleLabelValue Regular Expression Pattern to be applied against the sample label value field (optional)
     * @param rootFieldName Name of the first field of JSON object. Applicable for JSON producer only. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFlowMetricsAsync(String producer, List<String> includedRegistries, String sampleName, String sampleLabelValue, String rootFieldName, final ApiCallback<StreamingOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFlowMetricsValidateBeforeCall(producer, includedRegistries, sampleName, sampleLabelValue, rootFieldName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamingOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFlows
     * @param registryId The registry client id. (required)
     * @param bucketId The bucket id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFlowsCall(String registryId, String bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/registries/{registry-id}/buckets/{bucket-id}/flows"
            .replaceAll("\\{" + "registry-id" + "\\}", apiClient.escapeString(registryId.toString()))
            .replaceAll("\\{" + "bucket-id" + "\\}", apiClient.escapeString(bucketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFlowsValidateBeforeCall(String registryId, String bucketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling getFlows(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getFlows(Async)");
        }
        
        com.squareup.okhttp.Call call = getFlowsCall(registryId, bucketId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the flows from the specified registry and bucket for the current user
     * 
     * @param registryId The registry client id. (required)
     * @param bucketId The bucket id. (required)
     * @return VersionedFlowsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlowsEntity getFlows(String registryId, String bucketId) throws ApiException {
        ApiResponse<VersionedFlowsEntity> resp = getFlowsWithHttpInfo(registryId, bucketId);
        return resp.getData();
    }

    /**
     * Gets the flows from the specified registry and bucket for the current user
     * 
     * @param registryId The registry client id. (required)
     * @param bucketId The bucket id. (required)
     * @return ApiResponse&lt;VersionedFlowsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlowsEntity> getFlowsWithHttpInfo(String registryId, String bucketId) throws ApiException {
        com.squareup.okhttp.Call call = getFlowsValidateBeforeCall(registryId, bucketId, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlowsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the flows from the specified registry and bucket for the current user (asynchronously)
     * 
     * @param registryId The registry client id. (required)
     * @param bucketId The bucket id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFlowsAsync(String registryId, String bucketId, final ApiCallback<VersionedFlowsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFlowsValidateBeforeCall(registryId, bucketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlowsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInputPortStatus
     * @param id The input port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInputPortStatusCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/input-ports/{id}/status"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nodewise != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodewise", nodewise));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInputPortStatusValidateBeforeCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInputPortStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getInputPortStatusCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets status for an input port
     * 
     * @param id The input port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return PortStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortStatusEntity getInputPortStatus(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        ApiResponse<PortStatusEntity> resp = getInputPortStatusWithHttpInfo(id, nodewise, clusterNodeId);
        return resp.getData();
    }

    /**
     * Gets status for an input port
     * 
     * @param id The input port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ApiResponse&lt;PortStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortStatusEntity> getInputPortStatusWithHttpInfo(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getInputPortStatusValidateBeforeCall(id, nodewise, clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<PortStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status for an input port (asynchronously)
     * 
     * @param id The input port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInputPortStatusAsync(String id, Boolean nodewise, String clusterNodeId, final ApiCallback<PortStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInputPortStatusValidateBeforeCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOutputPortStatus
     * @param id The output port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOutputPortStatusCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/output-ports/{id}/status"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nodewise != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodewise", nodewise));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOutputPortStatusValidateBeforeCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOutputPortStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getOutputPortStatusCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets status for an output port
     * 
     * @param id The output port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return PortStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortStatusEntity getOutputPortStatus(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        ApiResponse<PortStatusEntity> resp = getOutputPortStatusWithHttpInfo(id, nodewise, clusterNodeId);
        return resp.getData();
    }

    /**
     * Gets status for an output port
     * 
     * @param id The output port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ApiResponse&lt;PortStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortStatusEntity> getOutputPortStatusWithHttpInfo(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getOutputPortStatusValidateBeforeCall(id, nodewise, clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<PortStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status for an output port (asynchronously)
     * 
     * @param id The output port id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOutputPortStatusAsync(String id, Boolean nodewise, String clusterNodeId, final ApiCallback<PortStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOutputPortStatusValidateBeforeCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getParameterContexts
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParameterContextsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/parameter-contexts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParameterContextsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getParameterContextsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all Parameter Contexts
     * 
     * @return ParameterContextsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParameterContextsEntity getParameterContexts() throws ApiException {
        ApiResponse<ParameterContextsEntity> resp = getParameterContextsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets all Parameter Contexts
     * 
     * @return ApiResponse&lt;ParameterContextsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParameterContextsEntity> getParameterContextsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getParameterContextsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ParameterContextsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all Parameter Contexts (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParameterContextsAsync(final ApiCallback<ParameterContextsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParameterContextsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParameterContextsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getParameterProviderTypes
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param type If specified, will only return types whose fully qualified classname matches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParameterProviderTypesCall(String bundleGroupFilter, String bundleArtifactFilter, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/parameter-provider-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bundleGroupFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bundleGroupFilter", bundleGroupFilter));
        if (bundleArtifactFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bundleArtifactFilter", bundleArtifactFilter));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParameterProviderTypesValidateBeforeCall(String bundleGroupFilter, String bundleArtifactFilter, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getParameterProviderTypesCall(bundleGroupFilter, bundleArtifactFilter, type, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves the types of parameter providers that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param type If specified, will only return types whose fully qualified classname matches. (optional)
     * @return ParameterProviderTypesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParameterProviderTypesEntity getParameterProviderTypes(String bundleGroupFilter, String bundleArtifactFilter, String type) throws ApiException {
        ApiResponse<ParameterProviderTypesEntity> resp = getParameterProviderTypesWithHttpInfo(bundleGroupFilter, bundleArtifactFilter, type);
        return resp.getData();
    }

    /**
     * Retrieves the types of parameter providers that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param type If specified, will only return types whose fully qualified classname matches. (optional)
     * @return ApiResponse&lt;ParameterProviderTypesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParameterProviderTypesEntity> getParameterProviderTypesWithHttpInfo(String bundleGroupFilter, String bundleArtifactFilter, String type) throws ApiException {
        com.squareup.okhttp.Call call = getParameterProviderTypesValidateBeforeCall(bundleGroupFilter, bundleArtifactFilter, type, null, null);
        Type localVarReturnType = new TypeToken<ParameterProviderTypesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the types of parameter providers that this NiFi supports (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param type If specified, will only return types whose fully qualified classname matches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParameterProviderTypesAsync(String bundleGroupFilter, String bundleArtifactFilter, String type, final ApiCallback<ParameterProviderTypesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParameterProviderTypesValidateBeforeCall(bundleGroupFilter, bundleArtifactFilter, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParameterProviderTypesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getParameterProviders
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParameterProvidersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/parameter-providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getParameterProvidersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getParameterProvidersCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all parameter providers
     * 
     * @return ParameterProvidersEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParameterProvidersEntity getParameterProviders() throws ApiException {
        ApiResponse<ParameterProvidersEntity> resp = getParameterProvidersWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets all parameter providers
     * 
     * @return ApiResponse&lt;ParameterProvidersEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParameterProvidersEntity> getParameterProvidersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getParameterProvidersValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ParameterProvidersEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all parameter providers (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParameterProvidersAsync(final ApiCallback<ParameterProvidersEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParameterProvidersValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParameterProvidersEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPrioritizers
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPrioritizersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/prioritizers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPrioritizersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getPrioritizersCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves the types of prioritizers that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @return PrioritizerTypesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrioritizerTypesEntity getPrioritizers() throws ApiException {
        ApiResponse<PrioritizerTypesEntity> resp = getPrioritizersWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the types of prioritizers that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @return ApiResponse&lt;PrioritizerTypesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrioritizerTypesEntity> getPrioritizersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPrioritizersValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PrioritizerTypesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the types of prioritizers that this NiFi supports (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPrioritizersAsync(final ApiCallback<PrioritizerTypesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPrioritizersValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrioritizerTypesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessGroupStatus
     * @param id The process group id. (required)
     * @param recursive Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional, default to false)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessGroupStatusCall(String id, Boolean recursive, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/process-groups/{id}/status"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recursive", recursive));
        if (nodewise != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodewise", nodewise));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessGroupStatusValidateBeforeCall(String id, Boolean recursive, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProcessGroupStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getProcessGroupStatusCall(id, recursive, nodewise, clusterNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the status for a process group
     * The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
     * @param id The process group id. (required)
     * @param recursive Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional, default to false)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ProcessGroupStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessGroupStatusEntity getProcessGroupStatus(String id, Boolean recursive, Boolean nodewise, String clusterNodeId) throws ApiException {
        ApiResponse<ProcessGroupStatusEntity> resp = getProcessGroupStatusWithHttpInfo(id, recursive, nodewise, clusterNodeId);
        return resp.getData();
    }

    /**
     * Gets the status for a process group
     * The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
     * @param id The process group id. (required)
     * @param recursive Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional, default to false)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ApiResponse&lt;ProcessGroupStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessGroupStatusEntity> getProcessGroupStatusWithHttpInfo(String id, Boolean recursive, Boolean nodewise, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessGroupStatusValidateBeforeCall(id, recursive, nodewise, clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<ProcessGroupStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the status for a process group (asynchronously)
     * The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
     * @param id The process group id. (required)
     * @param recursive Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional, default to false)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessGroupStatusAsync(String id, Boolean recursive, Boolean nodewise, String clusterNodeId, final ApiCallback<ProcessGroupStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessGroupStatusValidateBeforeCall(id, recursive, nodewise, clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessGroupStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessGroupStatusHistory
     * @param id The process group id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessGroupStatusHistoryCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/process-groups/{id}/status/history"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessGroupStatusHistoryValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProcessGroupStatusHistory(Async)");
        }
        
        com.squareup.okhttp.Call call = getProcessGroupStatusHistoryCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets status history for a remote process group
     * 
     * @param id The process group id. (required)
     * @return StatusHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusHistoryEntity getProcessGroupStatusHistory(String id) throws ApiException {
        ApiResponse<StatusHistoryEntity> resp = getProcessGroupStatusHistoryWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets status history for a remote process group
     * 
     * @param id The process group id. (required)
     * @return ApiResponse&lt;StatusHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusHistoryEntity> getProcessGroupStatusHistoryWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getProcessGroupStatusHistoryValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status history for a remote process group (asynchronously)
     * 
     * @param id The process group id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessGroupStatusHistoryAsync(String id, final ApiCallback<StatusHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessGroupStatusHistoryValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessorStatus
     * @param id The processor id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessorStatusCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/processors/{id}/status"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nodewise != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodewise", nodewise));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessorStatusValidateBeforeCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProcessorStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getProcessorStatusCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets status for a processor
     * 
     * @param id The processor id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ProcessorStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessorStatusEntity getProcessorStatus(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        ApiResponse<ProcessorStatusEntity> resp = getProcessorStatusWithHttpInfo(id, nodewise, clusterNodeId);
        return resp.getData();
    }

    /**
     * Gets status for a processor
     * 
     * @param id The processor id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ApiResponse&lt;ProcessorStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessorStatusEntity> getProcessorStatusWithHttpInfo(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getProcessorStatusValidateBeforeCall(id, nodewise, clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<ProcessorStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status for a processor (asynchronously)
     * 
     * @param id The processor id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessorStatusAsync(String id, Boolean nodewise, String clusterNodeId, final ApiCallback<ProcessorStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessorStatusValidateBeforeCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessorStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessorStatusHistory
     * @param id The processor id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessorStatusHistoryCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/processors/{id}/status/history"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessorStatusHistoryValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProcessorStatusHistory(Async)");
        }
        
        com.squareup.okhttp.Call call = getProcessorStatusHistoryCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets status history for a processor
     * 
     * @param id The processor id. (required)
     * @return StatusHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusHistoryEntity getProcessorStatusHistory(String id) throws ApiException {
        ApiResponse<StatusHistoryEntity> resp = getProcessorStatusHistoryWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets status history for a processor
     * 
     * @param id The processor id. (required)
     * @return ApiResponse&lt;StatusHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusHistoryEntity> getProcessorStatusHistoryWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getProcessorStatusHistoryValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status history for a processor (asynchronously)
     * 
     * @param id The processor id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessorStatusHistoryAsync(String id, final ApiCallback<StatusHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessorStatusHistoryValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProcessorTypes
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param type If specified, will only return types whose fully qualified classname matches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProcessorTypesCall(String bundleGroupFilter, String bundleArtifactFilter, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/processor-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bundleGroupFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bundleGroupFilter", bundleGroupFilter));
        if (bundleArtifactFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bundleArtifactFilter", bundleArtifactFilter));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProcessorTypesValidateBeforeCall(String bundleGroupFilter, String bundleArtifactFilter, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getProcessorTypesCall(bundleGroupFilter, bundleArtifactFilter, type, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves the types of processors that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param type If specified, will only return types whose fully qualified classname matches. (optional)
     * @return ProcessorTypesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProcessorTypesEntity getProcessorTypes(String bundleGroupFilter, String bundleArtifactFilter, String type) throws ApiException {
        ApiResponse<ProcessorTypesEntity> resp = getProcessorTypesWithHttpInfo(bundleGroupFilter, bundleArtifactFilter, type);
        return resp.getData();
    }

    /**
     * Retrieves the types of processors that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param type If specified, will only return types whose fully qualified classname matches. (optional)
     * @return ApiResponse&lt;ProcessorTypesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProcessorTypesEntity> getProcessorTypesWithHttpInfo(String bundleGroupFilter, String bundleArtifactFilter, String type) throws ApiException {
        com.squareup.okhttp.Call call = getProcessorTypesValidateBeforeCall(bundleGroupFilter, bundleArtifactFilter, type, null, null);
        Type localVarReturnType = new TypeToken<ProcessorTypesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the types of processors that this NiFi supports (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param type If specified, will only return types whose fully qualified classname matches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProcessorTypesAsync(String bundleGroupFilter, String bundleArtifactFilter, String type, final ApiCallback<ProcessorTypesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProcessorTypesValidateBeforeCall(bundleGroupFilter, bundleArtifactFilter, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProcessorTypesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRegistryClients
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRegistryClientsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/registries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRegistryClientsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getRegistryClientsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the listing of available flow registry clients
     * 
     * @return FlowRegistryClientsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FlowRegistryClientsEntity getRegistryClients() throws ApiException {
        ApiResponse<FlowRegistryClientsEntity> resp = getRegistryClientsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets the listing of available flow registry clients
     * 
     * @return ApiResponse&lt;FlowRegistryClientsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FlowRegistryClientsEntity> getRegistryClientsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getRegistryClientsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<FlowRegistryClientsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the listing of available flow registry clients (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRegistryClientsAsync(final ApiCallback<FlowRegistryClientsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRegistryClientsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FlowRegistryClientsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRemoteProcessGroupStatus
     * @param id The remote process group id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRemoteProcessGroupStatusCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/remote-process-groups/{id}/status"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nodewise != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodewise", nodewise));
        if (clusterNodeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clusterNodeId", clusterNodeId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRemoteProcessGroupStatusValidateBeforeCall(String id, Boolean nodewise, String clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRemoteProcessGroupStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getRemoteProcessGroupStatusCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets status for a remote process group
     * 
     * @param id The remote process group id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return RemoteProcessGroupStatusEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RemoteProcessGroupStatusEntity getRemoteProcessGroupStatus(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        ApiResponse<RemoteProcessGroupStatusEntity> resp = getRemoteProcessGroupStatusWithHttpInfo(id, nodewise, clusterNodeId);
        return resp.getData();
    }

    /**
     * Gets status for a remote process group
     * 
     * @param id The remote process group id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @return ApiResponse&lt;RemoteProcessGroupStatusEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RemoteProcessGroupStatusEntity> getRemoteProcessGroupStatusWithHttpInfo(String id, Boolean nodewise, String clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getRemoteProcessGroupStatusValidateBeforeCall(id, nodewise, clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<RemoteProcessGroupStatusEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets status for a remote process group (asynchronously)
     * 
     * @param id The remote process group id. (required)
     * @param nodewise Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)
     * @param clusterNodeId The id of the node where to get the status. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRemoteProcessGroupStatusAsync(String id, Boolean nodewise, String clusterNodeId, final ApiCallback<RemoteProcessGroupStatusEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRemoteProcessGroupStatusValidateBeforeCall(id, nodewise, clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RemoteProcessGroupStatusEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRemoteProcessGroupStatusHistory
     * @param id The remote process group id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRemoteProcessGroupStatusHistoryCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/remote-process-groups/{id}/status/history"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRemoteProcessGroupStatusHistoryValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRemoteProcessGroupStatusHistory(Async)");
        }
        
        com.squareup.okhttp.Call call = getRemoteProcessGroupStatusHistoryCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the status history
     * 
     * @param id The remote process group id. (required)
     * @return StatusHistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusHistoryEntity getRemoteProcessGroupStatusHistory(String id) throws ApiException {
        ApiResponse<StatusHistoryEntity> resp = getRemoteProcessGroupStatusHistoryWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets the status history
     * 
     * @param id The remote process group id. (required)
     * @return ApiResponse&lt;StatusHistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusHistoryEntity> getRemoteProcessGroupStatusHistoryWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getRemoteProcessGroupStatusHistoryValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the status history (asynchronously)
     * 
     * @param id The remote process group id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRemoteProcessGroupStatusHistoryAsync(String id, final ApiCallback<StatusHistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRemoteProcessGroupStatusHistoryValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusHistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportingTaskTypes
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param type If specified, will only return types whose fully qualified classname matches. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportingTaskTypesCall(String bundleGroupFilter, String bundleArtifactFilter, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/reporting-task-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bundleGroupFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bundleGroupFilter", bundleGroupFilter));
        if (bundleArtifactFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bundleArtifactFilter", bundleArtifactFilter));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportingTaskTypesValidateBeforeCall(String bundleGroupFilter, String bundleArtifactFilter, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getReportingTaskTypesCall(bundleGroupFilter, bundleArtifactFilter, type, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves the types of reporting tasks that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param type If specified, will only return types whose fully qualified classname matches. (optional)
     * @return ReportingTaskTypesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportingTaskTypesEntity getReportingTaskTypes(String bundleGroupFilter, String bundleArtifactFilter, String type) throws ApiException {
        ApiResponse<ReportingTaskTypesEntity> resp = getReportingTaskTypesWithHttpInfo(bundleGroupFilter, bundleArtifactFilter, type);
        return resp.getData();
    }

    /**
     * Retrieves the types of reporting tasks that this NiFi supports
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param type If specified, will only return types whose fully qualified classname matches. (optional)
     * @return ApiResponse&lt;ReportingTaskTypesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportingTaskTypesEntity> getReportingTaskTypesWithHttpInfo(String bundleGroupFilter, String bundleArtifactFilter, String type) throws ApiException {
        com.squareup.okhttp.Call call = getReportingTaskTypesValidateBeforeCall(bundleGroupFilter, bundleArtifactFilter, type, null, null);
        Type localVarReturnType = new TypeToken<ReportingTaskTypesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the types of reporting tasks that this NiFi supports (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param bundleGroupFilter If specified, will only return types that are a member of this bundle group. (optional)
     * @param bundleArtifactFilter If specified, will only return types that are a member of this bundle artifact. (optional)
     * @param type If specified, will only return types whose fully qualified classname matches. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportingTaskTypesAsync(String bundleGroupFilter, String bundleArtifactFilter, String type, final ApiCallback<ReportingTaskTypesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportingTaskTypesValidateBeforeCall(bundleGroupFilter, bundleArtifactFilter, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportingTaskTypesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportingTasks
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportingTasksCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/reporting-tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportingTasksValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getReportingTasksCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all reporting tasks
     * 
     * @return ReportingTasksEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportingTasksEntity getReportingTasks() throws ApiException {
        ApiResponse<ReportingTasksEntity> resp = getReportingTasksWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets all reporting tasks
     * 
     * @return ApiResponse&lt;ReportingTasksEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportingTasksEntity> getReportingTasksWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getReportingTasksValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ReportingTasksEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all reporting tasks (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportingTasksAsync(final ApiCallback<ReportingTasksEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportingTasksValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportingTasksEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRuntimeManifest
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRuntimeManifestCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/runtime-manifest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRuntimeManifestValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getRuntimeManifestCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves the runtime manifest for this NiFi instance.
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @return RuntimeManifestEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuntimeManifestEntity getRuntimeManifest() throws ApiException {
        ApiResponse<RuntimeManifestEntity> resp = getRuntimeManifestWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves the runtime manifest for this NiFi instance.
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @return ApiResponse&lt;RuntimeManifestEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuntimeManifestEntity> getRuntimeManifestWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getRuntimeManifestValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RuntimeManifestEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves the runtime manifest for this NiFi instance. (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRuntimeManifestAsync(final ApiCallback<RuntimeManifestEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRuntimeManifestValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuntimeManifestEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTemplates
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTemplatesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTemplatesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getTemplatesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all templates
     * 
     * @return TemplatesEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TemplatesEntity getTemplates() throws ApiException {
        ApiResponse<TemplatesEntity> resp = getTemplatesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets all templates
     * 
     * @return ApiResponse&lt;TemplatesEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TemplatesEntity> getTemplatesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTemplatesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TemplatesEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all templates (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTemplatesAsync(final ApiCallback<TemplatesEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTemplatesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TemplatesEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersions
     * @param registryId The registry client id. (required)
     * @param bucketId The bucket id. (required)
     * @param flowId The flow id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersionsCall(String registryId, String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/registries/{registry-id}/buckets/{bucket-id}/flows/{flow-id}/versions"
            .replaceAll("\\{" + "registry-id" + "\\}", apiClient.escapeString(registryId.toString()))
            .replaceAll("\\{" + "bucket-id" + "\\}", apiClient.escapeString(bucketId.toString()))
            .replaceAll("\\{" + "flow-id" + "\\}", apiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersionsValidateBeforeCall(String registryId, String bucketId, String flowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling getVersions(Async)");
        }
        // verify the required parameter 'bucketId' is set
        if (bucketId == null) {
            throw new ApiException("Missing the required parameter 'bucketId' when calling getVersions(Async)");
        }
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling getVersions(Async)");
        }
        
        com.squareup.okhttp.Call call = getVersionsCall(registryId, bucketId, flowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the flow versions from the specified registry and bucket for the specified flow for the current user
     * 
     * @param registryId The registry client id. (required)
     * @param bucketId The bucket id. (required)
     * @param flowId The flow id. (required)
     * @return VersionedFlowSnapshotMetadataSetEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VersionedFlowSnapshotMetadataSetEntity getVersions(String registryId, String bucketId, String flowId) throws ApiException {
        ApiResponse<VersionedFlowSnapshotMetadataSetEntity> resp = getVersionsWithHttpInfo(registryId, bucketId, flowId);
        return resp.getData();
    }

    /**
     * Gets the flow versions from the specified registry and bucket for the specified flow for the current user
     * 
     * @param registryId The registry client id. (required)
     * @param bucketId The bucket id. (required)
     * @param flowId The flow id. (required)
     * @return ApiResponse&lt;VersionedFlowSnapshotMetadataSetEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VersionedFlowSnapshotMetadataSetEntity> getVersionsWithHttpInfo(String registryId, String bucketId, String flowId) throws ApiException {
        com.squareup.okhttp.Call call = getVersionsValidateBeforeCall(registryId, bucketId, flowId, null, null);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshotMetadataSetEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the flow versions from the specified registry and bucket for the specified flow for the current user (asynchronously)
     * 
     * @param registryId The registry client id. (required)
     * @param bucketId The bucket id. (required)
     * @param flowId The flow id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionsAsync(String registryId, String bucketId, String flowId, final ApiCallback<VersionedFlowSnapshotMetadataSetEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionsValidateBeforeCall(registryId, bucketId, flowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VersionedFlowSnapshotMetadataSetEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryHistory
     * @param offset The offset into the result set. (required)
     * @param count The number of actions to return. (required)
     * @param sortColumn The field to sort on. (optional)
     * @param sortOrder The direction to sort. (optional)
     * @param startDate Include actions after this date. (optional)
     * @param endDate Include actions before this date. (optional)
     * @param userIdentity Include actions performed by this user. (optional)
     * @param sourceId Include actions on this component. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryHistoryCall(String offset, String count, String sortColumn, String sortOrder, String startDate, String endDate, String userIdentity, String sourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (sortColumn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortColumn", sortColumn));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        if (userIdentity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userIdentity", userIdentity));
        if (sourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sourceId", sourceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryHistoryValidateBeforeCall(String offset, String count, String sortColumn, String sortOrder, String startDate, String endDate, String userIdentity, String sourceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling queryHistory(Async)");
        }
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling queryHistory(Async)");
        }
        
        com.squareup.okhttp.Call call = queryHistoryCall(offset, count, sortColumn, sortOrder, startDate, endDate, userIdentity, sourceId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets configuration history
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param offset The offset into the result set. (required)
     * @param count The number of actions to return. (required)
     * @param sortColumn The field to sort on. (optional)
     * @param sortOrder The direction to sort. (optional)
     * @param startDate Include actions after this date. (optional)
     * @param endDate Include actions before this date. (optional)
     * @param userIdentity Include actions performed by this user. (optional)
     * @param sourceId Include actions on this component. (optional)
     * @return HistoryEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HistoryEntity queryHistory(String offset, String count, String sortColumn, String sortOrder, String startDate, String endDate, String userIdentity, String sourceId) throws ApiException {
        ApiResponse<HistoryEntity> resp = queryHistoryWithHttpInfo(offset, count, sortColumn, sortOrder, startDate, endDate, userIdentity, sourceId);
        return resp.getData();
    }

    /**
     * Gets configuration history
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param offset The offset into the result set. (required)
     * @param count The number of actions to return. (required)
     * @param sortColumn The field to sort on. (optional)
     * @param sortOrder The direction to sort. (optional)
     * @param startDate Include actions after this date. (optional)
     * @param endDate Include actions before this date. (optional)
     * @param userIdentity Include actions performed by this user. (optional)
     * @param sourceId Include actions on this component. (optional)
     * @return ApiResponse&lt;HistoryEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HistoryEntity> queryHistoryWithHttpInfo(String offset, String count, String sortColumn, String sortOrder, String startDate, String endDate, String userIdentity, String sourceId) throws ApiException {
        com.squareup.okhttp.Call call = queryHistoryValidateBeforeCall(offset, count, sortColumn, sortOrder, startDate, endDate, userIdentity, sourceId, null, null);
        Type localVarReturnType = new TypeToken<HistoryEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets configuration history (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param offset The offset into the result set. (required)
     * @param count The number of actions to return. (required)
     * @param sortColumn The field to sort on. (optional)
     * @param sortOrder The direction to sort. (optional)
     * @param startDate Include actions after this date. (optional)
     * @param endDate Include actions before this date. (optional)
     * @param userIdentity Include actions performed by this user. (optional)
     * @param sourceId Include actions on this component. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryHistoryAsync(String offset, String count, String sortColumn, String sortOrder, String startDate, String endDate, String userIdentity, String sourceId, final ApiCallback<HistoryEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryHistoryValidateBeforeCall(offset, count, sortColumn, sortOrder, startDate, endDate, userIdentity, sourceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HistoryEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scheduleComponents
     * @param body The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered. (required)
     * @param id The process group id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scheduleComponentsCall(ScheduleComponentsEntity body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/flow/process-groups/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scheduleComponentsValidateBeforeCall(ScheduleComponentsEntity body, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling scheduleComponents(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scheduleComponents(Async)");
        }
        
        com.squareup.okhttp.Call call = scheduleComponentsCall(body, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Schedule or unschedule components in the specified Process Group.
     * 
     * @param body The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered. (required)
     * @param id The process group id. (required)
     * @return ScheduleComponentsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScheduleComponentsEntity scheduleComponents(ScheduleComponentsEntity body, String id) throws ApiException {
        ApiResponse<ScheduleComponentsEntity> resp = scheduleComponentsWithHttpInfo(body, id);
        return resp.getData();
    }

    /**
     * Schedule or unschedule components in the specified Process Group.
     * 
     * @param body The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered. (required)
     * @param id The process group id. (required)
     * @return ApiResponse&lt;ScheduleComponentsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScheduleComponentsEntity> scheduleComponentsWithHttpInfo(ScheduleComponentsEntity body, String id) throws ApiException {
        com.squareup.okhttp.Call call = scheduleComponentsValidateBeforeCall(body, id, null, null);
        Type localVarReturnType = new TypeToken<ScheduleComponentsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Schedule or unschedule components in the specified Process Group. (asynchronously)
     * 
     * @param body The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered. (required)
     * @param id The process group id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scheduleComponentsAsync(ScheduleComponentsEntity body, String id, final ApiCallback<ScheduleComponentsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scheduleComponentsValidateBeforeCall(body, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScheduleComponentsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchCluster
     * @param q Node address to search for. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchClusterCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/cluster/search-results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchClusterValidateBeforeCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchCluster(Async)");
        }
        
        com.squareup.okhttp.Call call = searchClusterCall(q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Searches the cluster for a node with the specified address
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param q Node address to search for. (required)
     * @return ClusterSearchResultsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterSearchResultsEntity searchCluster(String q) throws ApiException {
        ApiResponse<ClusterSearchResultsEntity> resp = searchClusterWithHttpInfo(q);
        return resp.getData();
    }

    /**
     * Searches the cluster for a node with the specified address
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param q Node address to search for. (required)
     * @return ApiResponse&lt;ClusterSearchResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterSearchResultsEntity> searchClusterWithHttpInfo(String q) throws ApiException {
        com.squareup.okhttp.Call call = searchClusterValidateBeforeCall(q, null, null);
        Type localVarReturnType = new TypeToken<ClusterSearchResultsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches the cluster for a node with the specified address (asynchronously)
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     * @param q Node address to search for. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchClusterAsync(String q, final ApiCallback<ClusterSearchResultsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchClusterValidateBeforeCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterSearchResultsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchFlow
     * @param q  (optional)
     * @param a  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchFlowCall(String q, String a, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/flow/search-results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (a != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("a", a));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchFlowValidateBeforeCall(String q, String a, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = searchFlowCall(q, a, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Performs a search against this NiFi using the specified search term
     * Only search results from authorized components will be returned.
     * @param q  (optional)
     * @param a  (optional)
     * @return SearchResultsEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResultsEntity searchFlow(String q, String a) throws ApiException {
        ApiResponse<SearchResultsEntity> resp = searchFlowWithHttpInfo(q, a);
        return resp.getData();
    }

    /**
     * Performs a search against this NiFi using the specified search term
     * Only search results from authorized components will be returned.
     * @param q  (optional)
     * @param a  (optional)
     * @return ApiResponse&lt;SearchResultsEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResultsEntity> searchFlowWithHttpInfo(String q, String a) throws ApiException {
        com.squareup.okhttp.Call call = searchFlowValidateBeforeCall(q, a, null, null);
        Type localVarReturnType = new TypeToken<SearchResultsEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Performs a search against this NiFi using the specified search term (asynchronously)
     * Only search results from authorized components will be returned.
     * @param q  (optional)
     * @param a  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchFlowAsync(String q, String a, final ApiCallback<SearchResultsEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchFlowValidateBeforeCall(q, a, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResultsEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
