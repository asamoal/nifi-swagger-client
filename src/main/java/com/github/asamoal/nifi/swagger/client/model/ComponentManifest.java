/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.asamoal.nifi.swagger.client.model.ControllerServiceDefinition;
import com.github.asamoal.nifi.swagger.client.model.DefinedType;
import com.github.asamoal.nifi.swagger.client.model.ProcessorDefinition;
import com.github.asamoal.nifi.swagger.client.model.ReportingTaskDefinition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ComponentManifest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T17:38:07.775342+02:00[Europe/Berlin]")
public class ComponentManifest {
  @SerializedName("apis")
  private List<DefinedType> apis = null;

  @SerializedName("controllerServices")
  private List<ControllerServiceDefinition> controllerServices = null;

  @SerializedName("processors")
  private List<ProcessorDefinition> processors = null;

  @SerializedName("reportingTasks")
  private List<ReportingTaskDefinition> reportingTasks = null;

  public ComponentManifest apis(List<DefinedType> apis) {
    this.apis = apis;
    return this;
  }

  public ComponentManifest addApisItem(DefinedType apisItem) {
    if (this.apis == null) {
      this.apis = new ArrayList<DefinedType>();
    }
    this.apis.add(apisItem);
    return this;
  }

   /**
   * Public interfaces defined in this bundle
   * @return apis
  **/
  @Schema(description = "Public interfaces defined in this bundle")
  public List<DefinedType> getApis() {
    return apis;
  }

  public void setApis(List<DefinedType> apis) {
    this.apis = apis;
  }

  public ComponentManifest controllerServices(List<ControllerServiceDefinition> controllerServices) {
    this.controllerServices = controllerServices;
    return this;
  }

  public ComponentManifest addControllerServicesItem(ControllerServiceDefinition controllerServicesItem) {
    if (this.controllerServices == null) {
      this.controllerServices = new ArrayList<ControllerServiceDefinition>();
    }
    this.controllerServices.add(controllerServicesItem);
    return this;
  }

   /**
   * Controller Services provided in this bundle
   * @return controllerServices
  **/
  @Schema(description = "Controller Services provided in this bundle")
  public List<ControllerServiceDefinition> getControllerServices() {
    return controllerServices;
  }

  public void setControllerServices(List<ControllerServiceDefinition> controllerServices) {
    this.controllerServices = controllerServices;
  }

  public ComponentManifest processors(List<ProcessorDefinition> processors) {
    this.processors = processors;
    return this;
  }

  public ComponentManifest addProcessorsItem(ProcessorDefinition processorsItem) {
    if (this.processors == null) {
      this.processors = new ArrayList<ProcessorDefinition>();
    }
    this.processors.add(processorsItem);
    return this;
  }

   /**
   * Processors provided in this bundle
   * @return processors
  **/
  @Schema(description = "Processors provided in this bundle")
  public List<ProcessorDefinition> getProcessors() {
    return processors;
  }

  public void setProcessors(List<ProcessorDefinition> processors) {
    this.processors = processors;
  }

  public ComponentManifest reportingTasks(List<ReportingTaskDefinition> reportingTasks) {
    this.reportingTasks = reportingTasks;
    return this;
  }

  public ComponentManifest addReportingTasksItem(ReportingTaskDefinition reportingTasksItem) {
    if (this.reportingTasks == null) {
      this.reportingTasks = new ArrayList<ReportingTaskDefinition>();
    }
    this.reportingTasks.add(reportingTasksItem);
    return this;
  }

   /**
   * Reporting Tasks provided in this bundle
   * @return reportingTasks
  **/
  @Schema(description = "Reporting Tasks provided in this bundle")
  public List<ReportingTaskDefinition> getReportingTasks() {
    return reportingTasks;
  }

  public void setReportingTasks(List<ReportingTaskDefinition> reportingTasks) {
    this.reportingTasks = reportingTasks;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentManifest componentManifest = (ComponentManifest) o;
    return Objects.equals(this.apis, componentManifest.apis) &&
        Objects.equals(this.controllerServices, componentManifest.controllerServices) &&
        Objects.equals(this.processors, componentManifest.processors) &&
        Objects.equals(this.reportingTasks, componentManifest.reportingTasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apis, controllerServices, processors, reportingTasks);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentManifest {\n");
    
    sb.append("    apis: ").append(toIndentedString(apis)).append("\n");
    sb.append("    controllerServices: ").append(toIndentedString(controllerServices)).append("\n");
    sb.append("    processors: ").append(toIndentedString(processors)).append("\n");
    sb.append("    reportingTasks: ").append(toIndentedString(reportingTasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
