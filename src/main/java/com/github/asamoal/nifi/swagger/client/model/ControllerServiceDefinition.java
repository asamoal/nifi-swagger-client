/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.asamoal.nifi.swagger.client.model.BuildInfo;
import com.github.asamoal.nifi.swagger.client.model.DefinedType;
import com.github.asamoal.nifi.swagger.client.model.DynamicProperty;
import com.github.asamoal.nifi.swagger.client.model.PropertyDescriptor;
import com.github.asamoal.nifi.swagger.client.model.Restriction;
import com.github.asamoal.nifi.swagger.client.model.Stateful;
import com.github.asamoal.nifi.swagger.client.model.SystemResourceConsideration;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * ControllerServiceDefinition
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T17:38:07.775342+02:00[Europe/Berlin]")
public class ControllerServiceDefinition {
  @SerializedName("group")
  private String group = null;

  @SerializedName("artifact")
  private String artifact = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("typeDescription")
  private String typeDescription = null;

  @SerializedName("buildInfo")
  private BuildInfo buildInfo = null;

  @SerializedName("providedApiImplementations")
  private List<DefinedType> providedApiImplementations = null;

  @SerializedName("tags")
  private List<String> tags = null;

  @SerializedName("seeAlso")
  private List<String> seeAlso = null;

  @SerializedName("deprecated")
  private Boolean deprecated = null;

  @SerializedName("deprecationReason")
  private String deprecationReason = null;

  @SerializedName("deprecationAlternatives")
  private List<String> deprecationAlternatives = null;

  @SerializedName("restricted")
  private Boolean restricted = null;

  @SerializedName("restrictedExplanation")
  private String restrictedExplanation = null;

  @SerializedName("explicitRestrictions")
  private List<Restriction> explicitRestrictions = null;

  @SerializedName("stateful")
  private Stateful stateful = null;

  @SerializedName("systemResourceConsiderations")
  private List<SystemResourceConsideration> systemResourceConsiderations = null;

  @SerializedName("additionalDetails")
  private Boolean additionalDetails = null;

  @SerializedName("propertyDescriptors")
  private Map<String, PropertyDescriptor> propertyDescriptors = null;

  @SerializedName("supportsDynamicProperties")
  private Boolean supportsDynamicProperties = null;

  @SerializedName("dynamicProperties")
  private List<DynamicProperty> dynamicProperties = null;

  public ControllerServiceDefinition group(String group) {
    this.group = group;
    return this;
  }

   /**
   * The group name of the bundle that provides the referenced type.
   * @return group
  **/
  @Schema(description = "The group name of the bundle that provides the referenced type.")
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }

  public ControllerServiceDefinition artifact(String artifact) {
    this.artifact = artifact;
    return this;
  }

   /**
   * The artifact name of the bundle that provides the referenced type.
   * @return artifact
  **/
  @Schema(description = "The artifact name of the bundle that provides the referenced type.")
  public String getArtifact() {
    return artifact;
  }

  public void setArtifact(String artifact) {
    this.artifact = artifact;
  }

  public ControllerServiceDefinition version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the bundle that provides the referenced type.
   * @return version
  **/
  @Schema(description = "The version of the bundle that provides the referenced type.")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public ControllerServiceDefinition type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The fully-qualified class type
   * @return type
  **/
  @Schema(required = true, description = "The fully-qualified class type")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ControllerServiceDefinition typeDescription(String typeDescription) {
    this.typeDescription = typeDescription;
    return this;
  }

   /**
   * The description of the type.
   * @return typeDescription
  **/
  @Schema(description = "The description of the type.")
  public String getTypeDescription() {
    return typeDescription;
  }

  public void setTypeDescription(String typeDescription) {
    this.typeDescription = typeDescription;
  }

  public ControllerServiceDefinition buildInfo(BuildInfo buildInfo) {
    this.buildInfo = buildInfo;
    return this;
  }

   /**
   * Get buildInfo
   * @return buildInfo
  **/
  @Schema(description = "")
  public BuildInfo getBuildInfo() {
    return buildInfo;
  }

  public void setBuildInfo(BuildInfo buildInfo) {
    this.buildInfo = buildInfo;
  }

  public ControllerServiceDefinition providedApiImplementations(List<DefinedType> providedApiImplementations) {
    this.providedApiImplementations = providedApiImplementations;
    return this;
  }

  public ControllerServiceDefinition addProvidedApiImplementationsItem(DefinedType providedApiImplementationsItem) {
    if (this.providedApiImplementations == null) {
      this.providedApiImplementations = new ArrayList<DefinedType>();
    }
    this.providedApiImplementations.add(providedApiImplementationsItem);
    return this;
  }

   /**
   * If this type represents a provider for an interface, this lists the APIs it implements
   * @return providedApiImplementations
  **/
  @Schema(description = "If this type represents a provider for an interface, this lists the APIs it implements")
  public List<DefinedType> getProvidedApiImplementations() {
    return providedApiImplementations;
  }

  public void setProvidedApiImplementations(List<DefinedType> providedApiImplementations) {
    this.providedApiImplementations = providedApiImplementations;
  }

  public ControllerServiceDefinition tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ControllerServiceDefinition addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags associated with this type
   * @return tags
  **/
  @Schema(description = "The tags associated with this type")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public ControllerServiceDefinition seeAlso(List<String> seeAlso) {
    this.seeAlso = seeAlso;
    return this;
  }

  public ControllerServiceDefinition addSeeAlsoItem(String seeAlsoItem) {
    if (this.seeAlso == null) {
      this.seeAlso = new ArrayList<String>();
    }
    this.seeAlso.add(seeAlsoItem);
    return this;
  }

   /**
   * The names of other component types that may be related
   * @return seeAlso
  **/
  @Schema(description = "The names of other component types that may be related")
  public List<String> getSeeAlso() {
    return seeAlso;
  }

  public void setSeeAlso(List<String> seeAlso) {
    this.seeAlso = seeAlso;
  }

  public ControllerServiceDefinition deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

   /**
   * Whether or not the component has been deprecated
   * @return deprecated
  **/
  @Schema(description = "Whether or not the component has been deprecated")
  public Boolean isDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }

  public ControllerServiceDefinition deprecationReason(String deprecationReason) {
    this.deprecationReason = deprecationReason;
    return this;
  }

   /**
   * If this component has been deprecated, this optional field can be used to provide an explanation
   * @return deprecationReason
  **/
  @Schema(description = "If this component has been deprecated, this optional field can be used to provide an explanation")
  public String getDeprecationReason() {
    return deprecationReason;
  }

  public void setDeprecationReason(String deprecationReason) {
    this.deprecationReason = deprecationReason;
  }

  public ControllerServiceDefinition deprecationAlternatives(List<String> deprecationAlternatives) {
    this.deprecationAlternatives = deprecationAlternatives;
    return this;
  }

  public ControllerServiceDefinition addDeprecationAlternativesItem(String deprecationAlternativesItem) {
    if (this.deprecationAlternatives == null) {
      this.deprecationAlternatives = new ArrayList<String>();
    }
    this.deprecationAlternatives.add(deprecationAlternativesItem);
    return this;
  }

   /**
   * If this component has been deprecated, this optional field provides alternatives to use
   * @return deprecationAlternatives
  **/
  @Schema(description = "If this component has been deprecated, this optional field provides alternatives to use")
  public List<String> getDeprecationAlternatives() {
    return deprecationAlternatives;
  }

  public void setDeprecationAlternatives(List<String> deprecationAlternatives) {
    this.deprecationAlternatives = deprecationAlternatives;
  }

  public ControllerServiceDefinition restricted(Boolean restricted) {
    this.restricted = restricted;
    return this;
  }

   /**
   * Whether or not the component has a general restriction
   * @return restricted
  **/
  @Schema(description = "Whether or not the component has a general restriction")
  public Boolean isRestricted() {
    return restricted;
  }

  public void setRestricted(Boolean restricted) {
    this.restricted = restricted;
  }

  public ControllerServiceDefinition restrictedExplanation(String restrictedExplanation) {
    this.restrictedExplanation = restrictedExplanation;
    return this;
  }

   /**
   * An optional description of the general restriction
   * @return restrictedExplanation
  **/
  @Schema(description = "An optional description of the general restriction")
  public String getRestrictedExplanation() {
    return restrictedExplanation;
  }

  public void setRestrictedExplanation(String restrictedExplanation) {
    this.restrictedExplanation = restrictedExplanation;
  }

  public ControllerServiceDefinition explicitRestrictions(List<Restriction> explicitRestrictions) {
    this.explicitRestrictions = explicitRestrictions;
    return this;
  }

  public ControllerServiceDefinition addExplicitRestrictionsItem(Restriction explicitRestrictionsItem) {
    if (this.explicitRestrictions == null) {
      this.explicitRestrictions = new ArrayList<Restriction>();
    }
    this.explicitRestrictions.add(explicitRestrictionsItem);
    return this;
  }

   /**
   * Explicit restrictions that indicate a require permission to use the component
   * @return explicitRestrictions
  **/
  @Schema(description = "Explicit restrictions that indicate a require permission to use the component")
  public List<Restriction> getExplicitRestrictions() {
    return explicitRestrictions;
  }

  public void setExplicitRestrictions(List<Restriction> explicitRestrictions) {
    this.explicitRestrictions = explicitRestrictions;
  }

  public ControllerServiceDefinition stateful(Stateful stateful) {
    this.stateful = stateful;
    return this;
  }

   /**
   * Get stateful
   * @return stateful
  **/
  @Schema(description = "")
  public Stateful getStateful() {
    return stateful;
  }

  public void setStateful(Stateful stateful) {
    this.stateful = stateful;
  }

  public ControllerServiceDefinition systemResourceConsiderations(List<SystemResourceConsideration> systemResourceConsiderations) {
    this.systemResourceConsiderations = systemResourceConsiderations;
    return this;
  }

  public ControllerServiceDefinition addSystemResourceConsiderationsItem(SystemResourceConsideration systemResourceConsiderationsItem) {
    if (this.systemResourceConsiderations == null) {
      this.systemResourceConsiderations = new ArrayList<SystemResourceConsideration>();
    }
    this.systemResourceConsiderations.add(systemResourceConsiderationsItem);
    return this;
  }

   /**
   * The system resource considerations for the given component
   * @return systemResourceConsiderations
  **/
  @Schema(description = "The system resource considerations for the given component")
  public List<SystemResourceConsideration> getSystemResourceConsiderations() {
    return systemResourceConsiderations;
  }

  public void setSystemResourceConsiderations(List<SystemResourceConsideration> systemResourceConsiderations) {
    this.systemResourceConsiderations = systemResourceConsiderations;
  }

  public ControllerServiceDefinition additionalDetails(Boolean additionalDetails) {
    this.additionalDetails = additionalDetails;
    return this;
  }

   /**
   * Indicates if the component has additional details documentation
   * @return additionalDetails
  **/
  @Schema(description = "Indicates if the component has additional details documentation")
  public Boolean isAdditionalDetails() {
    return additionalDetails;
  }

  public void setAdditionalDetails(Boolean additionalDetails) {
    this.additionalDetails = additionalDetails;
  }

  public ControllerServiceDefinition propertyDescriptors(Map<String, PropertyDescriptor> propertyDescriptors) {
    this.propertyDescriptors = propertyDescriptors;
    return this;
  }

  public ControllerServiceDefinition putPropertyDescriptorsItem(String key, PropertyDescriptor propertyDescriptorsItem) {
    if (this.propertyDescriptors == null) {
      this.propertyDescriptors = new HashMap<String, PropertyDescriptor>();
    }
    this.propertyDescriptors.put(key, propertyDescriptorsItem);
    return this;
  }

   /**
   * Descriptions of configuration properties applicable to this component.
   * @return propertyDescriptors
  **/
  @Schema(description = "Descriptions of configuration properties applicable to this component.")
  public Map<String, PropertyDescriptor> getPropertyDescriptors() {
    return propertyDescriptors;
  }

  public void setPropertyDescriptors(Map<String, PropertyDescriptor> propertyDescriptors) {
    this.propertyDescriptors = propertyDescriptors;
  }

  public ControllerServiceDefinition supportsDynamicProperties(Boolean supportsDynamicProperties) {
    this.supportsDynamicProperties = supportsDynamicProperties;
    return this;
  }

   /**
   * Whether or not this component makes use of dynamic (user-set) properties.
   * @return supportsDynamicProperties
  **/
  @Schema(description = "Whether or not this component makes use of dynamic (user-set) properties.")
  public Boolean isSupportsDynamicProperties() {
    return supportsDynamicProperties;
  }

  public void setSupportsDynamicProperties(Boolean supportsDynamicProperties) {
    this.supportsDynamicProperties = supportsDynamicProperties;
  }

  public ControllerServiceDefinition dynamicProperties(List<DynamicProperty> dynamicProperties) {
    this.dynamicProperties = dynamicProperties;
    return this;
  }

  public ControllerServiceDefinition addDynamicPropertiesItem(DynamicProperty dynamicPropertiesItem) {
    if (this.dynamicProperties == null) {
      this.dynamicProperties = new ArrayList<DynamicProperty>();
    }
    this.dynamicProperties.add(dynamicPropertiesItem);
    return this;
  }

   /**
   * Describes the dynamic properties supported by this component
   * @return dynamicProperties
  **/
  @Schema(description = "Describes the dynamic properties supported by this component")
  public List<DynamicProperty> getDynamicProperties() {
    return dynamicProperties;
  }

  public void setDynamicProperties(List<DynamicProperty> dynamicProperties) {
    this.dynamicProperties = dynamicProperties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControllerServiceDefinition controllerServiceDefinition = (ControllerServiceDefinition) o;
    return Objects.equals(this.group, controllerServiceDefinition.group) &&
        Objects.equals(this.artifact, controllerServiceDefinition.artifact) &&
        Objects.equals(this.version, controllerServiceDefinition.version) &&
        Objects.equals(this.type, controllerServiceDefinition.type) &&
        Objects.equals(this.typeDescription, controllerServiceDefinition.typeDescription) &&
        Objects.equals(this.buildInfo, controllerServiceDefinition.buildInfo) &&
        Objects.equals(this.providedApiImplementations, controllerServiceDefinition.providedApiImplementations) &&
        Objects.equals(this.tags, controllerServiceDefinition.tags) &&
        Objects.equals(this.seeAlso, controllerServiceDefinition.seeAlso) &&
        Objects.equals(this.deprecated, controllerServiceDefinition.deprecated) &&
        Objects.equals(this.deprecationReason, controllerServiceDefinition.deprecationReason) &&
        Objects.equals(this.deprecationAlternatives, controllerServiceDefinition.deprecationAlternatives) &&
        Objects.equals(this.restricted, controllerServiceDefinition.restricted) &&
        Objects.equals(this.restrictedExplanation, controllerServiceDefinition.restrictedExplanation) &&
        Objects.equals(this.explicitRestrictions, controllerServiceDefinition.explicitRestrictions) &&
        Objects.equals(this.stateful, controllerServiceDefinition.stateful) &&
        Objects.equals(this.systemResourceConsiderations, controllerServiceDefinition.systemResourceConsiderations) &&
        Objects.equals(this.additionalDetails, controllerServiceDefinition.additionalDetails) &&
        Objects.equals(this.propertyDescriptors, controllerServiceDefinition.propertyDescriptors) &&
        Objects.equals(this.supportsDynamicProperties, controllerServiceDefinition.supportsDynamicProperties) &&
        Objects.equals(this.dynamicProperties, controllerServiceDefinition.dynamicProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(group, artifact, version, type, typeDescription, buildInfo, providedApiImplementations, tags, seeAlso, deprecated, deprecationReason, deprecationAlternatives, restricted, restrictedExplanation, explicitRestrictions, stateful, systemResourceConsiderations, additionalDetails, propertyDescriptors, supportsDynamicProperties, dynamicProperties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControllerServiceDefinition {\n");
    
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    artifact: ").append(toIndentedString(artifact)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeDescription: ").append(toIndentedString(typeDescription)).append("\n");
    sb.append("    buildInfo: ").append(toIndentedString(buildInfo)).append("\n");
    sb.append("    providedApiImplementations: ").append(toIndentedString(providedApiImplementations)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    seeAlso: ").append(toIndentedString(seeAlso)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    deprecationReason: ").append(toIndentedString(deprecationReason)).append("\n");
    sb.append("    deprecationAlternatives: ").append(toIndentedString(deprecationAlternatives)).append("\n");
    sb.append("    restricted: ").append(toIndentedString(restricted)).append("\n");
    sb.append("    restrictedExplanation: ").append(toIndentedString(restrictedExplanation)).append("\n");
    sb.append("    explicitRestrictions: ").append(toIndentedString(explicitRestrictions)).append("\n");
    sb.append("    stateful: ").append(toIndentedString(stateful)).append("\n");
    sb.append("    systemResourceConsiderations: ").append(toIndentedString(systemResourceConsiderations)).append("\n");
    sb.append("    additionalDetails: ").append(toIndentedString(additionalDetails)).append("\n");
    sb.append("    propertyDescriptors: ").append(toIndentedString(propertyDescriptors)).append("\n");
    sb.append("    supportsDynamicProperties: ").append(toIndentedString(supportsDynamicProperties)).append("\n");
    sb.append("    dynamicProperties: ").append(toIndentedString(dynamicProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
