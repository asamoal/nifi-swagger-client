/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.asamoal.nifi.swagger.client.model.BundleDTO;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * JVMFlowDiagnosticsSnapshotDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T17:38:07.775342+02:00[Europe/Berlin]")
public class JVMFlowDiagnosticsSnapshotDTO {
  @SerializedName("uptime")
  private String uptime = null;

  @SerializedName("timeZone")
  private String timeZone = null;

  @SerializedName("activeTimerDrivenThreads")
  private Integer activeTimerDrivenThreads = null;

  @SerializedName("activeEventDrivenThreads")
  private Integer activeEventDrivenThreads = null;

  @SerializedName("bundlesLoaded")
  private List<BundleDTO> bundlesLoaded = null;

  public JVMFlowDiagnosticsSnapshotDTO uptime(String uptime) {
    this.uptime = uptime;
    return this;
  }

   /**
   * How long this node has been running, formatted as hours:minutes:seconds.milliseconds
   * @return uptime
  **/
  @Schema(description = "How long this node has been running, formatted as hours:minutes:seconds.milliseconds")
  public String getUptime() {
    return uptime;
  }

  public void setUptime(String uptime) {
    this.uptime = uptime;
  }

  public JVMFlowDiagnosticsSnapshotDTO timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

   /**
   * The name of the Time Zone that is configured, if available
   * @return timeZone
  **/
  @Schema(description = "The name of the Time Zone that is configured, if available")
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }

  public JVMFlowDiagnosticsSnapshotDTO activeTimerDrivenThreads(Integer activeTimerDrivenThreads) {
    this.activeTimerDrivenThreads = activeTimerDrivenThreads;
    return this;
  }

   /**
   * The number of timer-driven threads that are active
   * @return activeTimerDrivenThreads
  **/
  @Schema(description = "The number of timer-driven threads that are active")
  public Integer getActiveTimerDrivenThreads() {
    return activeTimerDrivenThreads;
  }

  public void setActiveTimerDrivenThreads(Integer activeTimerDrivenThreads) {
    this.activeTimerDrivenThreads = activeTimerDrivenThreads;
  }

  public JVMFlowDiagnosticsSnapshotDTO activeEventDrivenThreads(Integer activeEventDrivenThreads) {
    this.activeEventDrivenThreads = activeEventDrivenThreads;
    return this;
  }

   /**
   * The number of event-driven threads that are active
   * @return activeEventDrivenThreads
  **/
  @Schema(description = "The number of event-driven threads that are active")
  public Integer getActiveEventDrivenThreads() {
    return activeEventDrivenThreads;
  }

  public void setActiveEventDrivenThreads(Integer activeEventDrivenThreads) {
    this.activeEventDrivenThreads = activeEventDrivenThreads;
  }

  public JVMFlowDiagnosticsSnapshotDTO bundlesLoaded(List<BundleDTO> bundlesLoaded) {
    this.bundlesLoaded = bundlesLoaded;
    return this;
  }

  public JVMFlowDiagnosticsSnapshotDTO addBundlesLoadedItem(BundleDTO bundlesLoadedItem) {
    if (this.bundlesLoaded == null) {
      this.bundlesLoaded = new ArrayList<BundleDTO>();
    }
    this.bundlesLoaded.add(bundlesLoadedItem);
    return this;
  }

   /**
   * The NiFi Bundles (NARs) that are loaded by NiFi
   * @return bundlesLoaded
  **/
  @Schema(description = "The NiFi Bundles (NARs) that are loaded by NiFi")
  public List<BundleDTO> getBundlesLoaded() {
    return bundlesLoaded;
  }

  public void setBundlesLoaded(List<BundleDTO> bundlesLoaded) {
    this.bundlesLoaded = bundlesLoaded;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JVMFlowDiagnosticsSnapshotDTO jvMFlowDiagnosticsSnapshotDTO = (JVMFlowDiagnosticsSnapshotDTO) o;
    return Objects.equals(this.uptime, jvMFlowDiagnosticsSnapshotDTO.uptime) &&
        Objects.equals(this.timeZone, jvMFlowDiagnosticsSnapshotDTO.timeZone) &&
        Objects.equals(this.activeTimerDrivenThreads, jvMFlowDiagnosticsSnapshotDTO.activeTimerDrivenThreads) &&
        Objects.equals(this.activeEventDrivenThreads, jvMFlowDiagnosticsSnapshotDTO.activeEventDrivenThreads) &&
        Objects.equals(this.bundlesLoaded, jvMFlowDiagnosticsSnapshotDTO.bundlesLoaded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uptime, timeZone, activeTimerDrivenThreads, activeEventDrivenThreads, bundlesLoaded);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JVMFlowDiagnosticsSnapshotDTO {\n");
    
    sb.append("    uptime: ").append(toIndentedString(uptime)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    activeTimerDrivenThreads: ").append(toIndentedString(activeTimerDrivenThreads)).append("\n");
    sb.append("    activeEventDrivenThreads: ").append(toIndentedString(activeEventDrivenThreads)).append("\n");
    sb.append("    bundlesLoaded: ").append(toIndentedString(bundlesLoaded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
