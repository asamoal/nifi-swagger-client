/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.asamoal.nifi.swagger.client.model.Entity;
import com.github.asamoal.nifi.swagger.client.model.InputStream;
import com.github.asamoal.nifi.swagger.client.model.NodeIdentifier;
import com.github.asamoal.nifi.swagger.client.model.Response;
import com.github.asamoal.nifi.swagger.client.model.Throwable;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * NodeResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T17:38:07.775342+02:00[Europe/Berlin]")
public class NodeResponse {
  @SerializedName("httpMethod")
  private String httpMethod = null;

  @SerializedName("requestUri")
  private String requestUri = null;

  @SerializedName("response")
  private Response response = null;

  @SerializedName("nodeId")
  private NodeIdentifier nodeId = null;

  @SerializedName("throwable")
  private Throwable throwable = null;

  @SerializedName("updatedEntity")
  private Entity updatedEntity = null;

  @SerializedName("requestId")
  private String requestId = null;

  @SerializedName("status")
  private Integer status = null;

  @SerializedName("is2xx")
  private Boolean is2xx = null;

  @SerializedName("is5xx")
  private Boolean is5xx = null;

  @SerializedName("clientResponse")
  private Response clientResponse = null;

  @SerializedName("inputStream")
  private InputStream inputStream = null;

  public NodeResponse httpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

   /**
   * Get httpMethod
   * @return httpMethod
  **/
  @Schema(description = "")
  public String getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
  }

  public NodeResponse requestUri(String requestUri) {
    this.requestUri = requestUri;
    return this;
  }

   /**
   * Get requestUri
   * @return requestUri
  **/
  @Schema(description = "")
  public String getRequestUri() {
    return requestUri;
  }

  public void setRequestUri(String requestUri) {
    this.requestUri = requestUri;
  }

  public NodeResponse response(Response response) {
    this.response = response;
    return this;
  }

   /**
   * Get response
   * @return response
  **/
  @Schema(description = "")
  public Response getResponse() {
    return response;
  }

  public void setResponse(Response response) {
    this.response = response;
  }

  public NodeResponse nodeId(NodeIdentifier nodeId) {
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @Schema(description = "")
  public NodeIdentifier getNodeId() {
    return nodeId;
  }

  public void setNodeId(NodeIdentifier nodeId) {
    this.nodeId = nodeId;
  }

  public NodeResponse throwable(Throwable throwable) {
    this.throwable = throwable;
    return this;
  }

   /**
   * Get throwable
   * @return throwable
  **/
  @Schema(description = "")
  public Throwable getThrowable() {
    return throwable;
  }

  public void setThrowable(Throwable throwable) {
    this.throwable = throwable;
  }

  public NodeResponse updatedEntity(Entity updatedEntity) {
    this.updatedEntity = updatedEntity;
    return this;
  }

   /**
   * Get updatedEntity
   * @return updatedEntity
  **/
  @Schema(description = "")
  public Entity getUpdatedEntity() {
    return updatedEntity;
  }

  public void setUpdatedEntity(Entity updatedEntity) {
    this.updatedEntity = updatedEntity;
  }

  public NodeResponse requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Get requestId
   * @return requestId
  **/
  @Schema(description = "")
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

  public NodeResponse status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public NodeResponse is2xx(Boolean is2xx) {
    this.is2xx = is2xx;
    return this;
  }

   /**
   * Get is2xx
   * @return is2xx
  **/
  @Schema(description = "")
  public Boolean isIs2xx() {
    return is2xx;
  }

  public void setIs2xx(Boolean is2xx) {
    this.is2xx = is2xx;
  }

  public NodeResponse is5xx(Boolean is5xx) {
    this.is5xx = is5xx;
    return this;
  }

   /**
   * Get is5xx
   * @return is5xx
  **/
  @Schema(description = "")
  public Boolean isIs5xx() {
    return is5xx;
  }

  public void setIs5xx(Boolean is5xx) {
    this.is5xx = is5xx;
  }

  public NodeResponse clientResponse(Response clientResponse) {
    this.clientResponse = clientResponse;
    return this;
  }

   /**
   * Get clientResponse
   * @return clientResponse
  **/
  @Schema(description = "")
  public Response getClientResponse() {
    return clientResponse;
  }

  public void setClientResponse(Response clientResponse) {
    this.clientResponse = clientResponse;
  }

  public NodeResponse inputStream(InputStream inputStream) {
    this.inputStream = inputStream;
    return this;
  }

   /**
   * Get inputStream
   * @return inputStream
  **/
  @Schema(description = "")
  public InputStream getInputStream() {
    return inputStream;
  }

  public void setInputStream(InputStream inputStream) {
    this.inputStream = inputStream;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeResponse nodeResponse = (NodeResponse) o;
    return Objects.equals(this.httpMethod, nodeResponse.httpMethod) &&
        Objects.equals(this.requestUri, nodeResponse.requestUri) &&
        Objects.equals(this.response, nodeResponse.response) &&
        Objects.equals(this.nodeId, nodeResponse.nodeId) &&
        Objects.equals(this.throwable, nodeResponse.throwable) &&
        Objects.equals(this.updatedEntity, nodeResponse.updatedEntity) &&
        Objects.equals(this.requestId, nodeResponse.requestId) &&
        Objects.equals(this.status, nodeResponse.status) &&
        Objects.equals(this.is2xx, nodeResponse.is2xx) &&
        Objects.equals(this.is5xx, nodeResponse.is5xx) &&
        Objects.equals(this.clientResponse, nodeResponse.clientResponse) &&
        Objects.equals(this.inputStream, nodeResponse.inputStream);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpMethod, requestUri, response, nodeId, throwable, updatedEntity, requestId, status, is2xx, is5xx, clientResponse, inputStream);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeResponse {\n");
    
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    requestUri: ").append(toIndentedString(requestUri)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    throwable: ").append(toIndentedString(throwable)).append("\n");
    sb.append("    updatedEntity: ").append(toIndentedString(updatedEntity)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    is2xx: ").append(toIndentedString(is2xx)).append("\n");
    sb.append("    is5xx: ").append(toIndentedString(is5xx)).append("\n");
    sb.append("    clientResponse: ").append(toIndentedString(clientResponse)).append("\n");
    sb.append("    inputStream: ").append(toIndentedString(inputStream)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
