/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.asamoal.nifi.swagger.client.model.AffectedComponentEntity;
import com.github.asamoal.nifi.swagger.client.model.ParameterContextReferenceEntity;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ParameterDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T17:38:07.775342+02:00[Europe/Berlin]")
public class ParameterDTO {
  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("sensitive")
  private Boolean sensitive = null;

  @SerializedName("value")
  private String value = null;

  @SerializedName("valueRemoved")
  private Boolean valueRemoved = null;

  @SerializedName("provided")
  private Boolean provided = null;

  @SerializedName("referencingComponents")
  private List<AffectedComponentEntity> referencingComponents = null;

  @SerializedName("parameterContext")
  private ParameterContextReferenceEntity parameterContext = null;

  @SerializedName("inherited")
  private Boolean inherited = null;

  public ParameterDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the Parameter
   * @return name
  **/
  @Schema(description = "The name of the Parameter")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ParameterDTO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the Parameter
   * @return description
  **/
  @Schema(description = "The description of the Parameter")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ParameterDTO sensitive(Boolean sensitive) {
    this.sensitive = sensitive;
    return this;
  }

   /**
   * Whether or not the Parameter is sensitive
   * @return sensitive
  **/
  @Schema(description = "Whether or not the Parameter is sensitive")
  public Boolean isSensitive() {
    return sensitive;
  }

  public void setSensitive(Boolean sensitive) {
    this.sensitive = sensitive;
  }

  public ParameterDTO value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The value of the Parameter
   * @return value
  **/
  @Schema(description = "The value of the Parameter")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public ParameterDTO valueRemoved(Boolean valueRemoved) {
    this.valueRemoved = valueRemoved;
    return this;
  }

   /**
   * Whether or not the value of the Parameter was removed. When a request is made to change a parameter, the value may be null. The absence of the value may be used either to indicate that the value is not to be changed, or that the value is to be set to null (i.e., removed). This denotes which of the two scenarios is being encountered.
   * @return valueRemoved
  **/
  @Schema(description = "Whether or not the value of the Parameter was removed. When a request is made to change a parameter, the value may be null. The absence of the value may be used either to indicate that the value is not to be changed, or that the value is to be set to null (i.e., removed). This denotes which of the two scenarios is being encountered.")
  public Boolean isValueRemoved() {
    return valueRemoved;
  }

  public void setValueRemoved(Boolean valueRemoved) {
    this.valueRemoved = valueRemoved;
  }

  public ParameterDTO provided(Boolean provided) {
    this.provided = provided;
    return this;
  }

   /**
   * Whether or not the Parameter is provided by a ParameterProvider
   * @return provided
  **/
  @Schema(description = "Whether or not the Parameter is provided by a ParameterProvider")
  public Boolean isProvided() {
    return provided;
  }

  public void setProvided(Boolean provided) {
    this.provided = provided;
  }

  public ParameterDTO referencingComponents(List<AffectedComponentEntity> referencingComponents) {
    this.referencingComponents = referencingComponents;
    return this;
  }

  public ParameterDTO addReferencingComponentsItem(AffectedComponentEntity referencingComponentsItem) {
    if (this.referencingComponents == null) {
      this.referencingComponents = new ArrayList<AffectedComponentEntity>();
    }
    this.referencingComponents.add(referencingComponentsItem);
    return this;
  }

   /**
   * The set of all components in the flow that are referencing this Parameter
   * @return referencingComponents
  **/
  @Schema(description = "The set of all components in the flow that are referencing this Parameter")
  public List<AffectedComponentEntity> getReferencingComponents() {
    return referencingComponents;
  }

  public void setReferencingComponents(List<AffectedComponentEntity> referencingComponents) {
    this.referencingComponents = referencingComponents;
  }

  public ParameterDTO parameterContext(ParameterContextReferenceEntity parameterContext) {
    this.parameterContext = parameterContext;
    return this;
  }

   /**
   * Get parameterContext
   * @return parameterContext
  **/
  @Schema(description = "")
  public ParameterContextReferenceEntity getParameterContext() {
    return parameterContext;
  }

  public void setParameterContext(ParameterContextReferenceEntity parameterContext) {
    this.parameterContext = parameterContext;
  }

  public ParameterDTO inherited(Boolean inherited) {
    this.inherited = inherited;
    return this;
  }

   /**
   * Whether or not the Parameter is inherited from another context
   * @return inherited
  **/
  @Schema(description = "Whether or not the Parameter is inherited from another context")
  public Boolean isInherited() {
    return inherited;
  }

  public void setInherited(Boolean inherited) {
    this.inherited = inherited;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParameterDTO parameterDTO = (ParameterDTO) o;
    return Objects.equals(this.name, parameterDTO.name) &&
        Objects.equals(this.description, parameterDTO.description) &&
        Objects.equals(this.sensitive, parameterDTO.sensitive) &&
        Objects.equals(this.value, parameterDTO.value) &&
        Objects.equals(this.valueRemoved, parameterDTO.valueRemoved) &&
        Objects.equals(this.provided, parameterDTO.provided) &&
        Objects.equals(this.referencingComponents, parameterDTO.referencingComponents) &&
        Objects.equals(this.parameterContext, parameterDTO.parameterContext) &&
        Objects.equals(this.inherited, parameterDTO.inherited);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, sensitive, value, valueRemoved, provided, referencingComponents, parameterContext, inherited);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParameterDTO {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueRemoved: ").append(toIndentedString(valueRemoved)).append("\n");
    sb.append("    provided: ").append(toIndentedString(provided)).append("\n");
    sb.append("    referencingComponents: ").append(toIndentedString(referencingComponents)).append("\n");
    sb.append("    parameterContext: ").append(toIndentedString(parameterContext)).append("\n");
    sb.append("    inherited: ").append(toIndentedString(inherited)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
