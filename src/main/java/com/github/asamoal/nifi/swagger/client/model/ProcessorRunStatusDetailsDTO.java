/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ProcessorRunStatusDetailsDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T17:38:07.775342+02:00[Europe/Berlin]")
public class ProcessorRunStatusDetailsDTO {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  /**
   * The run status of the processor
   */
  @JsonAdapter(RunStatusEnum.Adapter.class)
  public enum RunStatusEnum {
    RUNNING("Running"),
    STOPPED("Stopped"),
    INVALID("Invalid"),
    VALIDATING("Validating"),
    DISABLED("Disabled");

    private String value;

    RunStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RunStatusEnum fromValue(String input) {
      for (RunStatusEnum b : RunStatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RunStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RunStatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RunStatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RunStatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("runStatus")
  private RunStatusEnum runStatus = null;

  @SerializedName("validationErrors")
  private List<String> validationErrors = null;

  @SerializedName("activeThreadCount")
  private Integer activeThreadCount = null;

  public ProcessorRunStatusDetailsDTO id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the processor
   * @return id
  **/
  @Schema(description = "The ID of the processor")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ProcessorRunStatusDetailsDTO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the processor
   * @return name
  **/
  @Schema(description = "The name of the processor")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ProcessorRunStatusDetailsDTO runStatus(RunStatusEnum runStatus) {
    this.runStatus = runStatus;
    return this;
  }

   /**
   * The run status of the processor
   * @return runStatus
  **/
  @Schema(description = "The run status of the processor")
  public RunStatusEnum getRunStatus() {
    return runStatus;
  }

  public void setRunStatus(RunStatusEnum runStatus) {
    this.runStatus = runStatus;
  }

  public ProcessorRunStatusDetailsDTO validationErrors(List<String> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public ProcessorRunStatusDetailsDTO addValidationErrorsItem(String validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<String>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

   /**
   * The processor&#x27;s validation errors
   * @return validationErrors
  **/
  @Schema(description = "The processor's validation errors")
  public List<String> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<String> validationErrors) {
    this.validationErrors = validationErrors;
  }

  public ProcessorRunStatusDetailsDTO activeThreadCount(Integer activeThreadCount) {
    this.activeThreadCount = activeThreadCount;
    return this;
  }

   /**
   * The current number of threads that the processor is currently using
   * @return activeThreadCount
  **/
  @Schema(description = "The current number of threads that the processor is currently using")
  public Integer getActiveThreadCount() {
    return activeThreadCount;
  }

  public void setActiveThreadCount(Integer activeThreadCount) {
    this.activeThreadCount = activeThreadCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessorRunStatusDetailsDTO processorRunStatusDetailsDTO = (ProcessorRunStatusDetailsDTO) o;
    return Objects.equals(this.id, processorRunStatusDetailsDTO.id) &&
        Objects.equals(this.name, processorRunStatusDetailsDTO.name) &&
        Objects.equals(this.runStatus, processorRunStatusDetailsDTO.runStatus) &&
        Objects.equals(this.validationErrors, processorRunStatusDetailsDTO.validationErrors) &&
        Objects.equals(this.activeThreadCount, processorRunStatusDetailsDTO.activeThreadCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, runStatus, validationErrors, activeThreadCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessorRunStatusDetailsDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    runStatus: ").append(toIndentedString(runStatus)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    activeThreadCount: ").append(toIndentedString(activeThreadCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
