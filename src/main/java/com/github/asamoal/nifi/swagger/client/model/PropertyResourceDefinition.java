/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * PropertyResourceDefinition
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T17:38:07.775342+02:00[Europe/Berlin]")
public class PropertyResourceDefinition {
  /**
   * The cardinality of the resource definition (i.e. single or multiple)
   */
  @JsonAdapter(CardinalityEnum.Adapter.class)
  public enum CardinalityEnum {
    SINGLE("SINGLE"),
    MULTIPLE("MULTIPLE");

    private String value;

    CardinalityEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CardinalityEnum fromValue(String input) {
      for (CardinalityEnum b : CardinalityEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CardinalityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardinalityEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public CardinalityEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return CardinalityEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("cardinality")
  private CardinalityEnum cardinality = null;

  /**
   * Gets or Sets resourceTypes
   */
  @JsonAdapter(ResourceTypesEnum.Adapter.class)
  public enum ResourceTypesEnum {
    FILE("FILE"),
    DIRECTORY("DIRECTORY"),
    TEXT("TEXT"),
    URL("URL");

    private String value;

    ResourceTypesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResourceTypesEnum fromValue(String input) {
      for (ResourceTypesEnum b : ResourceTypesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResourceTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypesEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ResourceTypesEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ResourceTypesEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("resourceTypes")
  private List<ResourceTypesEnum> resourceTypes = null;

  public PropertyResourceDefinition cardinality(CardinalityEnum cardinality) {
    this.cardinality = cardinality;
    return this;
  }

   /**
   * The cardinality of the resource definition (i.e. single or multiple)
   * @return cardinality
  **/
  @Schema(description = "The cardinality of the resource definition (i.e. single or multiple)")
  public CardinalityEnum getCardinality() {
    return cardinality;
  }

  public void setCardinality(CardinalityEnum cardinality) {
    this.cardinality = cardinality;
  }

  public PropertyResourceDefinition resourceTypes(List<ResourceTypesEnum> resourceTypes) {
    this.resourceTypes = resourceTypes;
    return this;
  }

  public PropertyResourceDefinition addResourceTypesItem(ResourceTypesEnum resourceTypesItem) {
    if (this.resourceTypes == null) {
      this.resourceTypes = new ArrayList<ResourceTypesEnum>();
    }
    this.resourceTypes.add(resourceTypesItem);
    return this;
  }

   /**
   * The types of resources that can be referenced
   * @return resourceTypes
  **/
  @Schema(description = "The types of resources that can be referenced")
  public List<ResourceTypesEnum> getResourceTypes() {
    return resourceTypes;
  }

  public void setResourceTypes(List<ResourceTypesEnum> resourceTypes) {
    this.resourceTypes = resourceTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyResourceDefinition propertyResourceDefinition = (PropertyResourceDefinition) o;
    return Objects.equals(this.cardinality, propertyResourceDefinition.cardinality) &&
        Objects.equals(this.resourceTypes, propertyResourceDefinition.resourceTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardinality, resourceTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyResourceDefinition {\n");
    
    sb.append("    cardinality: ").append(toIndentedString(cardinality)).append("\n");
    sb.append("    resourceTypes: ").append(toIndentedString(resourceTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
