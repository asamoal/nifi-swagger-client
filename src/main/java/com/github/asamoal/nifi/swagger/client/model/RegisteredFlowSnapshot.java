/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.asamoal.nifi.swagger.client.model.ExternalControllerServiceReference;
import com.github.asamoal.nifi.swagger.client.model.FlowRegistryBucket;
import com.github.asamoal.nifi.swagger.client.model.ParameterProviderReference;
import com.github.asamoal.nifi.swagger.client.model.RegisteredFlow;
import com.github.asamoal.nifi.swagger.client.model.RegisteredFlowSnapshotMetadata;
import com.github.asamoal.nifi.swagger.client.model.VersionedParameterContext;
import com.github.asamoal.nifi.swagger.client.model.VersionedProcessGroup;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * RegisteredFlowSnapshot
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T17:38:07.775342+02:00[Europe/Berlin]")
public class RegisteredFlowSnapshot {
  @SerializedName("snapshotMetadata")
  private RegisteredFlowSnapshotMetadata snapshotMetadata = null;

  @SerializedName("flow")
  private RegisteredFlow flow = null;

  @SerializedName("bucket")
  private FlowRegistryBucket bucket = null;

  @SerializedName("flowContents")
  private VersionedProcessGroup flowContents = null;

  @SerializedName("externalControllerServices")
  private Map<String, ExternalControllerServiceReference> externalControllerServices = null;

  @SerializedName("parameterContexts")
  private Map<String, VersionedParameterContext> parameterContexts = null;

  @SerializedName("flowEncodingVersion")
  private String flowEncodingVersion = null;

  @SerializedName("parameterProviders")
  private Map<String, ParameterProviderReference> parameterProviders = null;

  @SerializedName("latest")
  private Boolean latest = null;

  public RegisteredFlowSnapshot snapshotMetadata(RegisteredFlowSnapshotMetadata snapshotMetadata) {
    this.snapshotMetadata = snapshotMetadata;
    return this;
  }

   /**
   * Get snapshotMetadata
   * @return snapshotMetadata
  **/
  @Schema(description = "")
  public RegisteredFlowSnapshotMetadata getSnapshotMetadata() {
    return snapshotMetadata;
  }

  public void setSnapshotMetadata(RegisteredFlowSnapshotMetadata snapshotMetadata) {
    this.snapshotMetadata = snapshotMetadata;
  }

  public RegisteredFlowSnapshot flow(RegisteredFlow flow) {
    this.flow = flow;
    return this;
  }

   /**
   * Get flow
   * @return flow
  **/
  @Schema(description = "")
  public RegisteredFlow getFlow() {
    return flow;
  }

  public void setFlow(RegisteredFlow flow) {
    this.flow = flow;
  }

  public RegisteredFlowSnapshot bucket(FlowRegistryBucket bucket) {
    this.bucket = bucket;
    return this;
  }

   /**
   * Get bucket
   * @return bucket
  **/
  @Schema(description = "")
  public FlowRegistryBucket getBucket() {
    return bucket;
  }

  public void setBucket(FlowRegistryBucket bucket) {
    this.bucket = bucket;
  }

  public RegisteredFlowSnapshot flowContents(VersionedProcessGroup flowContents) {
    this.flowContents = flowContents;
    return this;
  }

   /**
   * Get flowContents
   * @return flowContents
  **/
  @Schema(description = "")
  public VersionedProcessGroup getFlowContents() {
    return flowContents;
  }

  public void setFlowContents(VersionedProcessGroup flowContents) {
    this.flowContents = flowContents;
  }

  public RegisteredFlowSnapshot externalControllerServices(Map<String, ExternalControllerServiceReference> externalControllerServices) {
    this.externalControllerServices = externalControllerServices;
    return this;
  }

  public RegisteredFlowSnapshot putExternalControllerServicesItem(String key, ExternalControllerServiceReference externalControllerServicesItem) {
    if (this.externalControllerServices == null) {
      this.externalControllerServices = new HashMap<String, ExternalControllerServiceReference>();
    }
    this.externalControllerServices.put(key, externalControllerServicesItem);
    return this;
  }

   /**
   * Get externalControllerServices
   * @return externalControllerServices
  **/
  @Schema(description = "")
  public Map<String, ExternalControllerServiceReference> getExternalControllerServices() {
    return externalControllerServices;
  }

  public void setExternalControllerServices(Map<String, ExternalControllerServiceReference> externalControllerServices) {
    this.externalControllerServices = externalControllerServices;
  }

  public RegisteredFlowSnapshot parameterContexts(Map<String, VersionedParameterContext> parameterContexts) {
    this.parameterContexts = parameterContexts;
    return this;
  }

  public RegisteredFlowSnapshot putParameterContextsItem(String key, VersionedParameterContext parameterContextsItem) {
    if (this.parameterContexts == null) {
      this.parameterContexts = new HashMap<String, VersionedParameterContext>();
    }
    this.parameterContexts.put(key, parameterContextsItem);
    return this;
  }

   /**
   * Get parameterContexts
   * @return parameterContexts
  **/
  @Schema(description = "")
  public Map<String, VersionedParameterContext> getParameterContexts() {
    return parameterContexts;
  }

  public void setParameterContexts(Map<String, VersionedParameterContext> parameterContexts) {
    this.parameterContexts = parameterContexts;
  }

  public RegisteredFlowSnapshot flowEncodingVersion(String flowEncodingVersion) {
    this.flowEncodingVersion = flowEncodingVersion;
    return this;
  }

   /**
   * Get flowEncodingVersion
   * @return flowEncodingVersion
  **/
  @Schema(description = "")
  public String getFlowEncodingVersion() {
    return flowEncodingVersion;
  }

  public void setFlowEncodingVersion(String flowEncodingVersion) {
    this.flowEncodingVersion = flowEncodingVersion;
  }

  public RegisteredFlowSnapshot parameterProviders(Map<String, ParameterProviderReference> parameterProviders) {
    this.parameterProviders = parameterProviders;
    return this;
  }

  public RegisteredFlowSnapshot putParameterProvidersItem(String key, ParameterProviderReference parameterProvidersItem) {
    if (this.parameterProviders == null) {
      this.parameterProviders = new HashMap<String, ParameterProviderReference>();
    }
    this.parameterProviders.put(key, parameterProvidersItem);
    return this;
  }

   /**
   * Get parameterProviders
   * @return parameterProviders
  **/
  @Schema(description = "")
  public Map<String, ParameterProviderReference> getParameterProviders() {
    return parameterProviders;
  }

  public void setParameterProviders(Map<String, ParameterProviderReference> parameterProviders) {
    this.parameterProviders = parameterProviders;
  }

  public RegisteredFlowSnapshot latest(Boolean latest) {
    this.latest = latest;
    return this;
  }

   /**
   * Get latest
   * @return latest
  **/
  @Schema(description = "")
  public Boolean isLatest() {
    return latest;
  }

  public void setLatest(Boolean latest) {
    this.latest = latest;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisteredFlowSnapshot registeredFlowSnapshot = (RegisteredFlowSnapshot) o;
    return Objects.equals(this.snapshotMetadata, registeredFlowSnapshot.snapshotMetadata) &&
        Objects.equals(this.flow, registeredFlowSnapshot.flow) &&
        Objects.equals(this.bucket, registeredFlowSnapshot.bucket) &&
        Objects.equals(this.flowContents, registeredFlowSnapshot.flowContents) &&
        Objects.equals(this.externalControllerServices, registeredFlowSnapshot.externalControllerServices) &&
        Objects.equals(this.parameterContexts, registeredFlowSnapshot.parameterContexts) &&
        Objects.equals(this.flowEncodingVersion, registeredFlowSnapshot.flowEncodingVersion) &&
        Objects.equals(this.parameterProviders, registeredFlowSnapshot.parameterProviders) &&
        Objects.equals(this.latest, registeredFlowSnapshot.latest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(snapshotMetadata, flow, bucket, flowContents, externalControllerServices, parameterContexts, flowEncodingVersion, parameterProviders, latest);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisteredFlowSnapshot {\n");
    
    sb.append("    snapshotMetadata: ").append(toIndentedString(snapshotMetadata)).append("\n");
    sb.append("    flow: ").append(toIndentedString(flow)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    flowContents: ").append(toIndentedString(flowContents)).append("\n");
    sb.append("    externalControllerServices: ").append(toIndentedString(externalControllerServices)).append("\n");
    sb.append("    parameterContexts: ").append(toIndentedString(parameterContexts)).append("\n");
    sb.append("    flowEncodingVersion: ").append(toIndentedString(flowEncodingVersion)).append("\n");
    sb.append("    parameterProviders: ").append(toIndentedString(parameterProviders)).append("\n");
    sb.append("    latest: ").append(toIndentedString(latest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
