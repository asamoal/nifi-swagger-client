/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.github.asamoal.nifi.swagger.client.model.RevisionDTO;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * UpdateControllerServiceReferenceRequestEntity
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-04-12T17:38:07.775342+02:00[Europe/Berlin]")
public class UpdateControllerServiceReferenceRequestEntity {
  @SerializedName("id")
  private String id = null;

  /**
   * The new state of the references for the controller service.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ENABLED("ENABLED"),
    DISABLED("DISABLED"),
    RUNNING("RUNNING"),
    STOPPED("STOPPED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String input) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StateEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("referencingComponentRevisions")
  private Map<String, RevisionDTO> referencingComponentRevisions = null;

  @SerializedName("disconnectedNodeAcknowledged")
  private Boolean disconnectedNodeAcknowledged = null;

  @SerializedName("uiOnly")
  private Boolean uiOnly = null;

  public UpdateControllerServiceReferenceRequestEntity id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The identifier of the Controller Service.
   * @return id
  **/
  @Schema(description = "The identifier of the Controller Service.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public UpdateControllerServiceReferenceRequestEntity state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The new state of the references for the controller service.
   * @return state
  **/
  @Schema(description = "The new state of the references for the controller service.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public UpdateControllerServiceReferenceRequestEntity referencingComponentRevisions(Map<String, RevisionDTO> referencingComponentRevisions) {
    this.referencingComponentRevisions = referencingComponentRevisions;
    return this;
  }

  public UpdateControllerServiceReferenceRequestEntity putReferencingComponentRevisionsItem(String key, RevisionDTO referencingComponentRevisionsItem) {
    if (this.referencingComponentRevisions == null) {
      this.referencingComponentRevisions = new HashMap<String, RevisionDTO>();
    }
    this.referencingComponentRevisions.put(key, referencingComponentRevisionsItem);
    return this;
  }

   /**
   * The revisions for all referencing components.
   * @return referencingComponentRevisions
  **/
  @Schema(description = "The revisions for all referencing components.")
  public Map<String, RevisionDTO> getReferencingComponentRevisions() {
    return referencingComponentRevisions;
  }

  public void setReferencingComponentRevisions(Map<String, RevisionDTO> referencingComponentRevisions) {
    this.referencingComponentRevisions = referencingComponentRevisions;
  }

  public UpdateControllerServiceReferenceRequestEntity disconnectedNodeAcknowledged(Boolean disconnectedNodeAcknowledged) {
    this.disconnectedNodeAcknowledged = disconnectedNodeAcknowledged;
    return this;
  }

   /**
   * Acknowledges that this node is disconnected to allow for mutable requests to proceed.
   * @return disconnectedNodeAcknowledged
  **/
  @Schema(description = "Acknowledges that this node is disconnected to allow for mutable requests to proceed.")
  public Boolean isDisconnectedNodeAcknowledged() {
    return disconnectedNodeAcknowledged;
  }

  public void setDisconnectedNodeAcknowledged(Boolean disconnectedNodeAcknowledged) {
    this.disconnectedNodeAcknowledged = disconnectedNodeAcknowledged;
  }

  public UpdateControllerServiceReferenceRequestEntity uiOnly(Boolean uiOnly) {
    this.uiOnly = uiOnly;
    return this;
  }

   /**
   * Indicates whether or not the response should only include fields necessary for rendering the NiFi User Interface. As such, when this value is set to true, some fields may be returned as null values, and the selected fields may change at any time without notice. As a result, this value should not be set to true by any client other than the UI.
   * @return uiOnly
  **/
  @Schema(description = "Indicates whether or not the response should only include fields necessary for rendering the NiFi User Interface. As such, when this value is set to true, some fields may be returned as null values, and the selected fields may change at any time without notice. As a result, this value should not be set to true by any client other than the UI.")
  public Boolean isUiOnly() {
    return uiOnly;
  }

  public void setUiOnly(Boolean uiOnly) {
    this.uiOnly = uiOnly;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateControllerServiceReferenceRequestEntity updateControllerServiceReferenceRequestEntity = (UpdateControllerServiceReferenceRequestEntity) o;
    return Objects.equals(this.id, updateControllerServiceReferenceRequestEntity.id) &&
        Objects.equals(this.state, updateControllerServiceReferenceRequestEntity.state) &&
        Objects.equals(this.referencingComponentRevisions, updateControllerServiceReferenceRequestEntity.referencingComponentRevisions) &&
        Objects.equals(this.disconnectedNodeAcknowledged, updateControllerServiceReferenceRequestEntity.disconnectedNodeAcknowledged) &&
        Objects.equals(this.uiOnly, updateControllerServiceReferenceRequestEntity.uiOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, state, referencingComponentRevisions, disconnectedNodeAcknowledged, uiOnly);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateControllerServiceReferenceRequestEntity {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    referencingComponentRevisions: ").append(toIndentedString(referencingComponentRevisions)).append("\n");
    sb.append("    disconnectedNodeAcknowledged: ").append(toIndentedString(disconnectedNodeAcknowledged)).append("\n");
    sb.append("    uiOnly: ").append(toIndentedString(uiOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
