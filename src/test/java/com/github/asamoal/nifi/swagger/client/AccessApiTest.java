/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client;

import com.github.asamoal.nifi.swagger.client.model.AccessConfigurationEntity;
import com.github.asamoal.nifi.swagger.client.model.AccessStatusEntity;
import com.github.asamoal.nifi.swagger.client.model.AccessTokenExpirationEntity;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for AccessApi
 */
@Ignore
public class AccessApiTest {

    private final AccessApi api = new AccessApi();

    /**
     * Creates a token for accessing the REST API via username/password
     *
     * The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. It is stored in the browser as a cookie, but also returned inthe response body to be stored/used by third party client scripts.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createAccessTokenTest() throws Exception {
        String username = null;
        String password = null;
        String response = api.createAccessToken(username, password);

        // TODO: test validations
    }
    /**
     * Creates a token for accessing the REST API via Kerberos ticket exchange / SPNEGO negotiation
     *
     * The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. The token can be used in the Authorization header in the format &#x27;Authorization: Bearer &lt;token&gt;&#x27;. It is also stored in the browser as a cookie.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createAccessTokenFromTicketTest() throws Exception {
        String response = api.createAccessTokenFromTicket();

        // TODO: test validations
    }
    /**
     * Gets the status the client&#x27;s access
     *
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccessStatusTest() throws Exception {
        AccessStatusEntity response = api.getAccessStatus();

        // TODO: test validations
    }
    /**
     * Get expiration for current Access Token
     *
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccessTokenExpirationTest() throws Exception {
        AccessTokenExpirationEntity response = api.getAccessTokenExpiration();

        // TODO: test validations
    }
    /**
     * Retrieves the access configuration for this NiFi
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getLoginConfigTest() throws Exception {
        AccessConfigurationEntity response = api.getLoginConfig();

        // TODO: test validations
    }
    /**
     * Redirect/callback URI for processing the result of the Apache Knox login sequence.
     *
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void knoxCallbackTest() throws Exception {
        api.knoxCallback();

        // TODO: test validations
    }
    /**
     * Performs a logout in the Apache Knox.
     *
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void knoxLogoutTest() throws Exception {
        api.knoxLogout();

        // TODO: test validations
    }
    /**
     * Initiates a request to authenticate through Apache Knox.
     *
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void knoxRequestTest() throws Exception {
        api.knoxRequest();

        // TODO: test validations
    }
    /**
     * Performs a logout for other providers that have been issued a JWT.
     *
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void logOutTest() throws Exception {
        api.logOut();

        // TODO: test validations
    }
    /**
     * Completes the logout sequence by removing the cached Logout Request and Cookie if they existed and redirects to /nifi/login.
     *
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void logOutCompleteTest() throws Exception {
        api.logOutComplete();

        // TODO: test validations
    }
}
