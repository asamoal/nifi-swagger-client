/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client;

import com.github.asamoal.nifi.swagger.client.model.BulletinEntity;
import com.github.asamoal.nifi.swagger.client.model.ClusterEntity;
import com.github.asamoal.nifi.swagger.client.model.ComponentHistoryEntity;
import com.github.asamoal.nifi.swagger.client.model.ControllerConfigurationEntity;
import com.github.asamoal.nifi.swagger.client.model.ControllerServiceEntity;
import com.github.asamoal.nifi.swagger.client.model.FlowRegistryClientEntity;
import com.github.asamoal.nifi.swagger.client.model.FlowRegistryClientTypesEntity;
import com.github.asamoal.nifi.swagger.client.model.FlowRegistryClientsEntity;
import com.github.asamoal.nifi.swagger.client.model.HistoryEntity;
import com.github.asamoal.nifi.swagger.client.model.NodeEntity;
import com.github.asamoal.nifi.swagger.client.model.ParameterProviderEntity;
import com.github.asamoal.nifi.swagger.client.model.PropertyDescriptorEntity;
import com.github.asamoal.nifi.swagger.client.model.ReportingTaskEntity;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ControllerApi
 */
@Ignore
public class ControllerApiTest {

    private final ControllerApi api = new ControllerApi();

    /**
     * Creates a new bulletin
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createBulletinTest() throws Exception {
        BulletinEntity body = null;
        BulletinEntity response = api.createBulletin(body);

        // TODO: test validations
    }
    /**
     * Creates a new controller service
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createControllerServiceTest() throws Exception {
        ControllerServiceEntity body = null;
        ControllerServiceEntity response = api.createControllerService(body);

        // TODO: test validations
    }
    /**
     * Creates a new flow registry client
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createFlowRegistryClientTest() throws Exception {
        FlowRegistryClientEntity body = null;
        FlowRegistryClientEntity response = api.createFlowRegistryClient(body);

        // TODO: test validations
    }
    /**
     * Creates a new parameter provider
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createParameterProviderTest() throws Exception {
        ParameterProviderEntity body = null;
        ParameterProviderEntity response = api.createParameterProvider(body);

        // TODO: test validations
    }
    /**
     * Creates a new reporting task
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createReportingTaskTest() throws Exception {
        ReportingTaskEntity body = null;
        ReportingTaskEntity response = api.createReportingTask(body);

        // TODO: test validations
    }
    /**
     * Deletes a flow registry client
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteFlowRegistryClientTest() throws Exception {
        String id = null;
        String version = null;
        String clientId = null;
        Boolean disconnectedNodeAcknowledged = null;
        FlowRegistryClientEntity response = api.deleteFlowRegistryClient(id, version, clientId, disconnectedNodeAcknowledged);

        // TODO: test validations
    }
    /**
     * Purges history
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteHistoryTest() throws Exception {
        String endDate = null;
        HistoryEntity response = api.deleteHistory(endDate);

        // TODO: test validations
    }
    /**
     * Removes a node from the cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteNodeTest() throws Exception {
        String id = null;
        NodeEntity response = api.deleteNode(id);

        // TODO: test validations
    }
    /**
     * Gets the contents of the cluster
     *
     * Returns the contents of the cluster including all nodes and their status.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getClusterTest() throws Exception {
        ClusterEntity response = api.getCluster();

        // TODO: test validations
    }
    /**
     * Retrieves the configuration for this NiFi Controller
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getControllerConfigTest() throws Exception {
        ControllerConfigurationEntity response = api.getControllerConfig();

        // TODO: test validations
    }
    /**
     * Gets a flow registry client
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFlowRegistryClientTest() throws Exception {
        String id = null;
        FlowRegistryClientEntity response = api.getFlowRegistryClient(id);

        // TODO: test validations
    }
    /**
     * Gets the listing of available flow registry clients
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFlowRegistryClientsTest() throws Exception {
        FlowRegistryClientsEntity response = api.getFlowRegistryClients();

        // TODO: test validations
    }
    /**
     * Gets a node in the cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getNodeTest() throws Exception {
        String id = null;
        NodeEntity response = api.getNode(id);

        // TODO: test validations
    }
    /**
     * Gets status history for the node
     *
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getNodeStatusHistoryTest() throws Exception {
        ComponentHistoryEntity response = api.getNodeStatusHistory();

        // TODO: test validations
    }
    /**
     * Gets a flow registry client property descriptor
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPropertyDescriptorTest() throws Exception {
        String id = null;
        String propertyName = null;
        Boolean sensitive = null;
        PropertyDescriptorEntity response = api.getPropertyDescriptor(id, propertyName, sensitive);

        // TODO: test validations
    }
    /**
     * Retrieves the types of flow  that this NiFi supports
     *
     * Note: This endpoint is subject to change as NiFi and it&#x27;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRegistryClientTypesTest() throws Exception {
        FlowRegistryClientTypesEntity response = api.getRegistryClientTypes();

        // TODO: test validations
    }
    /**
     * Retrieves the configuration for this NiFi
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateControllerConfigTest() throws Exception {
        ControllerConfigurationEntity body = null;
        ControllerConfigurationEntity response = api.updateControllerConfig(body);

        // TODO: test validations
    }
    /**
     * Updates a flow registry client
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateFlowRegistryClientTest() throws Exception {
        FlowRegistryClientEntity body = null;
        String id = null;
        FlowRegistryClientEntity response = api.updateFlowRegistryClient(body, id);

        // TODO: test validations
    }
    /**
     * Updates a node in the cluster
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateNodeTest() throws Exception {
        NodeEntity body = null;
        String id = null;
        NodeEntity response = api.updateNode(body, id);

        // TODO: test validations
    }
}
