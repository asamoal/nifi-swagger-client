/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client;

import com.github.asamoal.nifi.swagger.client.model.ComponentStateEntity;
import com.github.asamoal.nifi.swagger.client.model.ConfigurationAnalysisEntity;
import com.github.asamoal.nifi.swagger.client.model.ControllerServiceEntity;
import com.github.asamoal.nifi.swagger.client.model.ControllerServiceReferencingComponentsEntity;
import com.github.asamoal.nifi.swagger.client.model.ControllerServiceRunStatusEntity;
import com.github.asamoal.nifi.swagger.client.model.PropertyDescriptorEntity;
import com.github.asamoal.nifi.swagger.client.model.UpdateControllerServiceReferenceRequestEntity;
import com.github.asamoal.nifi.swagger.client.model.VerifyConfigRequestEntity;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ControllerServicesApi
 */
@Ignore
public class ControllerServicesApiTest {

    private final ControllerServicesApi api = new ControllerServicesApi();

    /**
     * Performs analysis of the component&#x27;s configuration, providing information about which attributes are referenced.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void analyzeConfigurationTest() throws Exception {
        ConfigurationAnalysisEntity body = null;
        String id = null;
        ConfigurationAnalysisEntity response = api.analyzeConfiguration(body, id);

        // TODO: test validations
    }
    /**
     * Clears the state for a controller service
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void clearStateTest() throws Exception {
        String id = null;
        ComponentStateEntity response = api.clearState(id);

        // TODO: test validations
    }
    /**
     * Deletes the Verification Request with the given ID
     *
     * Deletes the Verification Request with the given ID. After a request is created, it is expected that the client will properly clean up the request by DELETE&#x27;ing it, once the Verification process has completed. If the request is deleted before the request completes, then the Verification request will finish the step that it is currently performing and then will cancel any subsequent steps.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteVerificationRequestTest() throws Exception {
        String id = null;
        String requestId = null;
        VerifyConfigRequestEntity response = api.deleteVerificationRequest(id, requestId);

        // TODO: test validations
    }
    /**
     * Gets a controller service
     *
     * If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getControllerServiceTest() throws Exception {
        String id = null;
        Boolean uiOnly = null;
        ControllerServiceEntity response = api.getControllerService(id, uiOnly);

        // TODO: test validations
    }
    /**
     * Gets a controller service
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getControllerServiceReferencesTest() throws Exception {
        String id = null;
        ControllerServiceReferencingComponentsEntity response = api.getControllerServiceReferences(id);

        // TODO: test validations
    }
    /**
     * Gets a controller service property descriptor
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPropertyDescriptorTest() throws Exception {
        String id = null;
        String propertyName = null;
        Boolean sensitive = null;
        PropertyDescriptorEntity response = api.getPropertyDescriptor(id, propertyName, sensitive);

        // TODO: test validations
    }
    /**
     * Gets the state for a controller service
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getStateTest() throws Exception {
        String id = null;
        ComponentStateEntity response = api.getState(id);

        // TODO: test validations
    }
    /**
     * Returns the Verification Request with the given ID
     *
     * Returns the Verification Request with the given ID. Once an Verification Request has been created, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getVerificationRequestTest() throws Exception {
        String id = null;
        String requestId = null;
        VerifyConfigRequestEntity response = api.getVerificationRequest(id, requestId);

        // TODO: test validations
    }
    /**
     * Deletes a controller service
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeControllerServiceTest() throws Exception {
        String id = null;
        String version = null;
        String clientId = null;
        Boolean disconnectedNodeAcknowledged = null;
        ControllerServiceEntity response = api.removeControllerService(id, version, clientId, disconnectedNodeAcknowledged);

        // TODO: test validations
    }
    /**
     * Performs verification of the Controller Service&#x27;s configuration
     *
     * This will initiate the process of verifying a given Controller Service configuration. This may be a long-running task. As a result, this endpoint will immediately return a ControllerServiceConfigVerificationRequestEntity, and the process of performing the verification will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /controller-services/{serviceId}/verification-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /controller-services/{serviceId}/verification-requests/{requestId}.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void submitConfigVerificationRequestTest() throws Exception {
        VerifyConfigRequestEntity body = null;
        String id = null;
        VerifyConfigRequestEntity response = api.submitConfigVerificationRequest(body, id);

        // TODO: test validations
    }
    /**
     * Updates a controller service
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateControllerServiceTest() throws Exception {
        ControllerServiceEntity body = null;
        String id = null;
        ControllerServiceEntity response = api.updateControllerService(body, id);

        // TODO: test validations
    }
    /**
     * Updates a controller services references
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateControllerServiceReferencesTest() throws Exception {
        UpdateControllerServiceReferenceRequestEntity body = null;
        String id = null;
        ControllerServiceReferencingComponentsEntity response = api.updateControllerServiceReferences(body, id);

        // TODO: test validations
    }
    /**
     * Updates run status of a controller service
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateRunStatusTest() throws Exception {
        ControllerServiceRunStatusEntity body = null;
        String id = null;
        ControllerServiceEntity response = api.updateRunStatus(body, id);

        // TODO: test validations
    }
}
