/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client;

import com.github.asamoal.nifi.swagger.client.model.StreamingOutput;
import com.github.asamoal.nifi.swagger.client.model.TransactionResultEntity;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DataTransferApi
 */
@Ignore
public class DataTransferApiTest {

    private final DataTransferApi api = new DataTransferApi();

    /**
     * Commit or cancel the specified transaction
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void commitInputPortTransactionTest() throws Exception {
        Integer responseCode = null;
        String portId = null;
        String transactionId = null;
        TransactionResultEntity response = api.commitInputPortTransaction(responseCode, portId, transactionId);

        // TODO: test validations
    }
    /**
     * Commit or cancel the specified transaction
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void commitOutputPortTransactionTest() throws Exception {
        Integer responseCode = null;
        String checksum = null;
        String portId = null;
        String transactionId = null;
        TransactionResultEntity response = api.commitOutputPortTransaction(responseCode, checksum, portId, transactionId);

        // TODO: test validations
    }
    /**
     * Create a transaction to the specified output port or input port
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPortTransactionTest() throws Exception {
        String portType = null;
        String portId = null;
        TransactionResultEntity response = api.createPortTransaction(portType, portId);

        // TODO: test validations
    }
    /**
     * Extend transaction TTL
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void extendInputPortTransactionTTLTest() throws Exception {
        String portId = null;
        String transactionId = null;
        TransactionResultEntity response = api.extendInputPortTransactionTTL(portId, transactionId);

        // TODO: test validations
    }
    /**
     * Extend transaction TTL
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void extendOutputPortTransactionTTLTest() throws Exception {
        String portId = null;
        String transactionId = null;
        TransactionResultEntity response = api.extendOutputPortTransactionTTL(portId, transactionId);

        // TODO: test validations
    }
    /**
     * Transfer flow files to the input port
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void receiveFlowFilesTest() throws Exception {
        String portId = null;
        String transactionId = null;
        String response = api.receiveFlowFiles(portId, transactionId);

        // TODO: test validations
    }
    /**
     * Transfer flow files from the output port
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void transferFlowFilesTest() throws Exception {
        String portId = null;
        String transactionId = null;
        StreamingOutput response = api.transferFlowFiles(portId, transactionId);

        // TODO: test validations
    }
}
