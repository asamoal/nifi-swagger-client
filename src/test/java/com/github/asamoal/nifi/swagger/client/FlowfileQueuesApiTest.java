/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.20.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.asamoal.nifi.swagger.client;

import com.github.asamoal.nifi.swagger.client.model.DropRequestEntity;
import com.github.asamoal.nifi.swagger.client.model.FlowFileEntity;
import com.github.asamoal.nifi.swagger.client.model.ListingRequestEntity;
import com.github.asamoal.nifi.swagger.client.model.StreamingOutput;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for FlowfileQueuesApi
 */
@Ignore
public class FlowfileQueuesApiTest {

    private final FlowfileQueuesApi api = new FlowfileQueuesApi();

    /**
     * Creates a request to drop the contents of the queue in this connection.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDropRequestTest() throws Exception {
        String id = null;
        DropRequestEntity response = api.createDropRequest(id);

        // TODO: test validations
    }
    /**
     * Lists the contents of the queue in this connection.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createFlowFileListingTest() throws Exception {
        String id = null;
        ListingRequestEntity response = api.createFlowFileListing(id);

        // TODO: test validations
    }
    /**
     * Cancels and/or removes a request to list the contents of this connection.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteListingRequestTest() throws Exception {
        String id = null;
        String listingRequestId = null;
        ListingRequestEntity response = api.deleteListingRequest(id, listingRequestId);

        // TODO: test validations
    }
    /**
     * Gets the content for a FlowFile in a Connection.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void downloadFlowFileContentTest() throws Exception {
        String id = null;
        String flowfileUuid = null;
        String clientId = null;
        String clusterNodeId = null;
        StreamingOutput response = api.downloadFlowFileContent(id, flowfileUuid, clientId, clusterNodeId);

        // TODO: test validations
    }
    /**
     * Gets the current status of a drop request for the specified connection.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDropRequestTest() throws Exception {
        String id = null;
        String dropRequestId = null;
        DropRequestEntity response = api.getDropRequest(id, dropRequestId);

        // TODO: test validations
    }
    /**
     * Gets a FlowFile from a Connection.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFlowFileTest() throws Exception {
        String id = null;
        String flowfileUuid = null;
        String clusterNodeId = null;
        FlowFileEntity response = api.getFlowFile(id, flowfileUuid, clusterNodeId);

        // TODO: test validations
    }
    /**
     * Gets the current status of a listing request for the specified connection.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getListingRequestTest() throws Exception {
        String id = null;
        String listingRequestId = null;
        ListingRequestEntity response = api.getListingRequest(id, listingRequestId);

        // TODO: test validations
    }
    /**
     * Cancels and/or removes a request to drop the contents of this connection.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeDropRequestTest() throws Exception {
        String id = null;
        String dropRequestId = null;
        DropRequestEntity response = api.removeDropRequest(id, dropRequestId);

        // TODO: test validations
    }
}
